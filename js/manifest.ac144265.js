(window.webpackJsonp=window.webpackJsonp||[]).push([["manifest"],{"0a20":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("作用域")]),t("hr"),t("blockquote",[t("p",[s._v("作用域是指源代码定义变量的区域。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 《"),t("em",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/3"}},[s._v("JavaScript深入之词法作用域和动态作用域")])]),s._v("》")])]),t("p",[s._v("JavaScript采用词法作用域（静态作用域），函数的作用域在函数定义时就已经确定了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//例1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"global"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("checkscope")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"local"')]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" scope;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" f();\n}\ncheckscope();\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"global"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("checkscope")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"local"')]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" scope;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" f;\n}\ncheckscope()();\n")])]),t("p",[s._v("这两段代码都会输出： local")]),t("p",[s._v("因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。")]),t("blockquote",[t("p",[s._v("JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。 "),t("em",[s._v("《JavaScript权威指南》")])])]),t("h4",[s._v("JavaScript代码的执行顺序")]),t("hr"),t("p",[s._v("先看一段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//例2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    f2()\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n}\nf1();\n")])]),t("p",[s._v("这段代码会输出 undefined 。")]),t("p",[s._v("这是因为JavaScript引擎对JavaScript代码进行执行之前,需要进行预先处理,然后再执行处理后的代码。")]),t("p",[s._v("也就是说JavaScript在浏览器中运行的过程分为两个阶段："),t("strong",[s._v("“预解析”（准备工作）")]),s._v(" 和 "),t("strong",[s._v("执行阶段")]),s._v(" 。")]),t("h4",[t("strong",[s._v("“预解析”")])]),t("hr"),t("h5",[s._v("可执行代码块")]),t("p",[s._v("JavaScript引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。这个“一段一段”中的“段”怎么划分呢?")]),t("p",[s._v("JavaScript 的可执行代码(executable code)有三种类型："),t("em",[s._v("全局代码、函数代码 和 eval代码")]),s._v("。")]),t("h5",[s._v("执行上下文栈")]),t("p",[s._v("我们上面提到的所谓javascript预解释正是创建函数的执行上下文。比如当执行到一个函数时，就会进行预解析，也就是创建函数执行上下文（execution context）。")]),t("p",[s._v("问题来了，一个程序肯定会有很多函数，如何管理这么多执行上下文呢？所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。")]),t("p",[s._v("为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [];\n")])]),t("p",[s._v("有点晕... 我们来分析一下JavaScript引擎执行例2代码时的预解析流程：")]),t("p",[s._v("当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，用 globalContext 表示它，只有当整个应用程序结束的时候，ECStack 才会被清空，并且我们知道栈是一种先进后出的数据结构，所以程序结束之前， ECStack 最底部永远有个 globalContext：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    globalContext\n];\n")])]),t("p",[s._v("接下来JavaScript 遇到下面的这段代码了：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    f2()\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n}\nf1();\n")])]),t("p",[s._v("当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 伪代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// f1() 遇到函数f1()创建函数执行上下文并压入执行上下文栈。")]),s._v("\nECStack.push(<f1> functionContext);\n// f1中调用了f2，所以此时还要创建f2的执行上下文\nECStack.push(<f2> functionContext);\n// f2 执行完毕\nECStack.pop();\n// f1 执行完毕\nECStack.pop();\n// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext，直到程序结束。\n")])]),t("h4",[s._v("变量对象")]),t("p",[s._v("前面讲到当JavaScript执行一段可执行代码时会创建对应的执行上下文。对于每个执行上下文都有三个重要属性：")]),t("ul",[t("li",[t("p",[s._v("变量对象(Variable object，VO)")])]),t("li",[t("p",[s._v("作用域链(Scope chain)")])]),t("li",[t("p",[s._v("this")])])]),t("p",[s._v("先来看变量对象：")]),t("p",[s._v("变量对象(variableObject)是与执行上下文相关的数据作用域,一个与上下文相关的特殊对象，其中存储了在上下文中定义的变量和函数声明和函数的形参（函数上下文才有）")]),t("p",[s._v("不同的可执行代码创建的执行上下文下的变量对象会稍有不同：")]),t("ul",[t("li",[t("p",[s._v("全局上下文中的变量对象就是全局对象，在客户端 JavaScript 中，全局对象就是Window 对象。")])]),t("li",[t("blockquote",[t("p",[s._v("在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。 《"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/5"}},[s._v("JavaScript深入之变量对象")]),s._v(" )》")])])])]),t("p",[s._v("我们用一段伪代码表示创立的执行上下文：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("executionContextObj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scopeChain")]),s._v(": { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 变量对象 + 所有父级执行上下文中的变量对象 */")]),s._v(" },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("variableObject")]),s._v(": { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*  函数参数 / 参数, 内部变量以及函数声明 */")]),s._v(" },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("this")]),s._v(": {}\n}\n")])]),t("p",[s._v("当进入执行上下文时，这时候还没有执行代码,属于解析阶段，这个阶段会创建:作用域链（scope chain）、变量对象（variableObject）、设置this。")]),t("p",[s._v("先来看创建变量对象的细节：")]),t("ul",[t("li",[s._v("根据函数的参数，创建并初始化arguments object "),t("ul",[t("li",[s._v("创建由名称和对应值组成的一个变量对象的属性")]),t("li",[s._v("没有实参时，属性值设为 undefined")])])]),t("li",[s._v("扫描函数内部代码，查找函数声明（Function declaration） "),t("ul",[t("li",[s._v("对于所有找到的函数声明，将函数名和函数引用存入变量对象中")]),t("li",[s._v("如果变量对象已经存在其它相同名称的属性（函数和变量），则完全替换这个属性")])])]),t("li",[s._v("扫描函数内部代码，查找变量声明（Variable declaration） "),t("ul",[t("li",[s._v("由名称和对应值（undefined）组成一个变量对象的属性被创建")]),t("li",[s._v("如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性")])])])]),t("p",[s._v("举个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n    a = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\n}\nf1("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n")])]),t("p",[s._v("在进入执行上下文后，这时候的 AO 是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("AO = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("f2")]),s._v(": reference to "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{},\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n}\n")])]),t("p",[s._v("然后假设预解析完毕进入执行阶段，执行完毕后此时 AO ：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": reference to FunctionExpression "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"a"')]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("f2")]),s._v(": reference to "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{},\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("b")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n")])]),t("p",[s._v("简单的总结下：")]),t("ol",[t("li",[t("p",[s._v("全局上下文的变量对象初始化是全局对象")])]),t("li",[t("p",[s._v("函数上下文的变量对象初始化只包括 Arguments 对象")])]),t("li",[t("p",[s._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")])]),t("li",[t("p",[s._v("在代码执行阶段，会再次修改变量对象的属性值")])])]),t("h4",[s._v("作用域链")]),t("p",[s._v("再来看执行上下文的另一个重要属性：作用域链。")]),t("blockquote",[t("p",[s._v("在"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/5"}},[s._v("《JavaScript深入之变量对象》")]),s._v("中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。 "),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/6"}},[s._v("《JavaScript深入之作用域链》")])])]),t("h5",[s._v("函数创建")]),t("p",[s._v("前面讲到函数的作用域在函数定义的时候就已经确定了。")]),t("p",[s._v("这是因为函数内部有一个属性[[scope]],当函数创建的时候，就会保存所有父变量对象到其中。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        ...\n    }\n}\n")])]),t("p",[s._v("函数创建时，各自的[[scope]]为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo.[[scope]] = [\n  globalContext.VO\n];\n\nbar.[[scope]] = [\n    fooContext.AO,\n    globalContext.VO\n];\n")])]),t("p",[s._v("当函数被执行，进入函数上下文，创建变量对象后，就会将变量对象添加到作用域链的最前端。Scope = [AO].concat([[Scope]]);这时Scope才代表完整的作用域链。")]),t("p",[s._v("再来看前面对作用域链的定义：")]),t("blockquote",[t("p",[s._v("当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。")])]),t("p",[s._v("就很好理解了。")]),t("p",[s._v("再来捋一捋：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"global scope"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("checkscope")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope2 = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'local scope'")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" scope2;\n}\ncheckscope();\n")])]),t("p",[s._v("用上面例子来总结一下函数执行上下文中作用域链和变量对象的创建过程：")]),t("p",[s._v("首先会遇到全局代码，创建全局执行上下文，并压入执行上下文栈，此时 checkscope 函数会被创建，并且保存作用域链到其内部属性[[Scope]]")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscope.[[scope]] = [\n    globalContext.VO\n];\n")])]),t("p",[s._v("然后执行 heckscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    checkscopeContext,\n    globalContext\n];\n")])]),t("p",[s._v("checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": checkscope.[[scope]],\n}\n")])]),t("p",[s._v("第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n    }，\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": checkscope.[[scope]],\n}\n")])]),t("p",[s._v("第三步：将活动对象压入 checkscope 作用域链顶端:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, [[Scope]]]\n}\n")])]),t("p",[s._v("准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'local scope'")]),s._v("\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, [[Scope]]]\n}\n")])]),t("p",[s._v("查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack.pop();\nECStack = [\n    globalContext\n];\n")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/3"}},[s._v("JavaScript深入之词法作用域和动态作用域")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/4"}},[s._v("JavaScript深入之执行上下文栈")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/5"}},[s._v("JavaScript深入之变量对象")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/6"}},[s._v("JavaScript深入之作用域链")])]),t("li",[t("a",{attrs:{href:"http://www.cxymsg.com/guide/hoisting.html#%E5%89%8D%E8%A8%80"}},[s._v("JavaScript的『预解释』与『变量提升』")])])]),t("p",[s._v("说明：本文大量参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},"0cb4":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("blockquote",[t("p",[s._v("typeof 是一元操作符，放在其单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串。")])]),t("p",[s._v("使用 typeof 对JavaScript 共六种数据类型 Undefined、Null、Boolean、Number、String、Object 的值进行操作的时候返回的结果却不是一一对应，分别是：")]),t("p",[s._v("undefined、object、boolean、number、string、object")]),t("p",[s._v("都变成小写的字符串。Null 和 Object 类型都返回了 object 字符串。虽然不能一一对应，但是 typeof 却能检测出函数类型:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" f) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function")]),s._v("\n")])]),t("p",[s._v("所以 typeof 能检测出六种类型的值，但是，除此之外 Object 下还有很多细分的类型呐，如 Array、Function、Date、RegExp、Error 等。如果用 typeof 去检测这些类型都会返回 object。")]),t("p",[s._v('幸好 Object.prototype.toString 方法可以帮我们，调用 Object.prototype.toString 会返回一个由 "[object " 和 class 和 "]" 组成的字符串，而 class 是要判断的对象的内部属性。')]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.toString.call("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(")); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [object Undefined]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.toString.call("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(")); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [object Null]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.toString.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("())); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [object Date]")]),s._v("\n...\n")])]),t("p",[s._v("可以看到这个 class 值就是识别对象类型的关键！正是因为这种特性，我们可以用 Object.prototype.toString 方法识别出更多类型。")]),t("p",[s._v("写一个 type 函数能检测各种类型的值，如果是基本类型，就使用 typeof，引用类型就使用 toString。此外鉴于 typeof 的结果是小写，我也希望所有的结果都是小写：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" classType = {};\n"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Boolean Number String Function Array Date RegExp Object Error Null Undefined'")]),s._v(".split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(").map("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item, index")]),s._v(")")]),s._v("{\n    classType["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'[object '")]),s._v("+ item + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("']'")]),s._v("] = item.toLowerCase()\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("type")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(" || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(" ?\n    classType["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.toString.call(obj)] || "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'objcet'")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj;\n}\n")])]),t("p",[s._v("然而在 IE6 中，null 和 undefined 会被 Object.prototype.toString 识别成 [object Object]！")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" classType = {};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 生成class2type映射")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Boolean Number String Function Array Date RegExp Object Error"')]),s._v(".split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(").map("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item, index")]),s._v(") ")]),s._v("{\n    classType["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"[object "')]),s._v(" + item + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"]"')]),s._v("] = item.toLowerCase();\n})\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("type")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 一箭双雕")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (obj == "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" obj + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined null")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v(" || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v(" ?\n        class2type["),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.toString.call(obj)] || "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v(" :\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj;\n}\n")])]),t("p",[s._v("有了 type 函数后，我们可以对常用的判断直接封装，比如 isFunction, isArray:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isFunction")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" type(obj) === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" isArray = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".isArray || "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" type(obj) === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'array'")]),s._v("\n}\n")])]),t("h5",[s._v("EmptyObject")]),t("p",[s._v("jQuery提供了 isEmptyObject 方法来判断是否是空对象，代码简单，我们直接看源码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isEmptyObject")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v(" obj ")]),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" name;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ( name "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" obj ) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n}\n")])]),t("p",[s._v("就是判断是否有属性，for 循环一旦执行，就说明有属性，有属性就会返回 false。")]),t("h5",[s._v("Window对象")]),t("p",[s._v("Window 对象作为客户端 JavaScript 的全局对象，它有一个 window 属性指向自身")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("isWindow")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" obj !== "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(" && obj = obj.window;\n}\n")])]),t("h5",[s._v("isArrayLike")]),t("p",[s._v("isArrayLike，看名字可能会让我们觉得这是判断类数组对象的，其实不仅仅是这样，jQuery 实现的 isArrayLike，数组和类数组都会返回 true。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" length = !!obj && "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'length'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" obj && obj.length;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" typeRes = type(obj);\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 排除掉函数和 Window 对象")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (typeRes === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v(" || isWindow(obj)) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(";\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" typeRes === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'array'")]),s._v(" || length === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" length === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'number'")]),s._v(" && length > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" && (length "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(")\n}\n")])]),t("p",[s._v("重点分析 return 这一行，使用了或语句，只要一个为 true，结果就返回 true。")]),t("p",[s._v("所以如果 isArrayLike 返回true，至少要满足三个条件之一：")]),t("ol",[t("li",[s._v("是数组")]),t("li",[s._v("长度为0")]),t("li",[s._v("length 属性大于 0 的数字类型，并且 length - 1 必须存在")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("a")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(isArrayLike("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v("))\n}\na();\n")])]),t("p",[s._v("如果我们去掉length === 0 这个判断，就会打印 false，然而我们都知道 arguments 是一个类数组对象，这里是应该返回 true 的。")]),t("p",[s._v("数组是可以这样写的：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("[,,"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]\n")])]),t("p",[s._v("第三个条件：length 是数字，并且 length > 0 且最后一个元素存在。")]),t("p",[s._v("当我们写一个对应的类数组对象就是：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" arrayLike = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n")])]),t("p",[s._v("也就是说当我们在数组中用逗号直接跳过的时候，我们认为该元素是不存在的，类数组对象中也就不用写这个元素，但是最后一个元素是一定要写的，要不然 length 的长度就不会是最后一个元素的 key 值加 1。")]),t("h5",[s._v("isElement")]),t("p",[s._v("判断是不是 DOM 元素:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("isElement = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" !!(obj && obj.nodeType === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n}\n")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/28"}},[s._v("JavaScript专题之类型判断(上)")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/30"}},[s._v("JavaScript专题之类型判断(下)")])])]),t("p",[s._v("说明：本文全部参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},"24f1":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this;s.$createElement;return s._self._c,s._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("blockquote",[t("p",[s._v("ECMAScript 规范给所有函数都定义了 call 和 apply 两个方法,他们的作用都是显示的绑定 this 。它们的第一个参数都是一个对象，它们会把 this 指向这个对象。不同的是 apply 的第二个参数是一个作为函数参数的数组。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("firstname, lastname")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" firstName + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + lastName\n}\nfoo.apply(obj, ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wo'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'shiye'")]),s._v("]) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wo cxk shiye")]),s._v("\n")])]),t("p",[s._v("而call方法后面传入的是一个参数列表，而不是单个数组。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("firstname, lastname")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" firstName + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + lastName\n}\nfoo.call(obj, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wo'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'shiye'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wo cxk shiye")]),s._v("\n")])]),t("p",[s._v("他们的作用是一样的，对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。")]),t("h4",[s._v("call")]),t("hr"),t("p",[s._v("先来模拟实现 call ：")]),t("p",[s._v("既然 call 方法会把 this 指向传入的对象，那直接把函数添加到对象上，再用对象调用不就是把 this 指向对象了")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj ={\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value)\n    }\n}\nobj.foo() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("确实可以，但是给对象本身添加了一个属性，不妥，得用 delete 删除掉。")]),t("p",[s._v("所以模拟的步骤为：")]),t("ol",[t("li",[s._v("将函数设为对象的属性")]),t("li",[s._v("执行函数")]),t("li",[s._v("删除函数")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {};\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{};\nobj.foo = foo;\nobj.foo();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" obj.foo;\n")])]),t("p",[s._v("根据这个思路尝试第一版：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myCall = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    obj.fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 this 就是调用 myCall 方法的函数")]),s._v("\n    obj.fn();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" obj.fn;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//测试一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value)\n}\nfoo.myCall(obj) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("实现了！再来解决参数的问题，前面说过call接收的是一个参数列表，那怎么获取参数呢？当然是 Arguments 对象，取第二到最后一个就是我们想要的参数了。比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("firstname, lastname")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" firstName + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + lastName\n}\nf.myCall(obj,"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wo'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'shiye'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 此时 arguments 为：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(" = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(":obj,\n    "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wo'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'shiye'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我们可以遍历类数组对象 arguments，取出想要的参数存入 args 数组中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(".length; i++){\n    args.push("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v("[i])\n}\n")])]),t("p",[s._v("接着把这个参数数组放到要执行的函数的参数里面去")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\nobj.fn(args.join("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("','")]),s._v("))\n")])]),t("p",[s._v("这样当然是不行的(只传入了一个参数),用ES6的 ... 运算符可以轻松实现：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\nobj.fn(...args)\n")])]),t("p",[s._v("不过 call 是 ES3 的方法,为了模拟实现一个 ES3 的方法,得用 eval 方法拼成一个函数,类似这样：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("eval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'obj.fn('")]),s._v(" + args + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("')'")]),s._v(")\n")])]),t("p",[s._v("eval() 函数接收一个字符串，计算并执行其中的的 JavaScript 代码。 这里 args 会自动调用 Array.toString() 这个方法。所以 args 不能直接 push(arguments[ i ]) ,而是要 push('arguments[' + i + ']'),这样的话 args 为 [\"arguments[ 1 ]\", \"arguments[ 2 ]\", \"arguments[ 3 ]\"],这样 eval 相当于接受了这样一个字符串 'obj.fn(' + arguments[ 1 ],arguments[ 2 ] + ')'。所以第二版完整代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myCall2 = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    obj.fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 this 就是调用 myCall2 方法的函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = [];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(".length; i++){\n        args.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'arguments['")]),s._v(" + i + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("']'")]),s._v(");\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("eval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'obj.fn('")]),s._v(" + args + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("')'")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" obj.fn;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//测试一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("firstname, lastname")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(firstname + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("' '")]),s._v(" + lastname)\n}\nfoo.myCall2(obj,"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wo'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'shiye'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wo cxk shiye")]),s._v("\n")])]),t("p",[s._v("还有要注意的地方：")]),t("ol",[t("li",[s._v("第一个参数可以是 null, 当为 null 时视为指向 window。")]),t("li",[s._v("函数是可以有返回值的！")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("vaule")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": name\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("age")]),s._v(": age\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(foo.call(obj,"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v("))\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    value: 1,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    name: 'cxk',")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    age: 18")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// }")]),s._v("\n")])]),t("p",[s._v("所以第三版：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myCall3 = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = obj || "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(";\n    obj.fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 this 就是调用 myCall3 方法的函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = [];\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(".length; i++){\n        args.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'arguments['")]),s._v(" + i + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("']'")]),s._v(");\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("eval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'obj.fn('")]),s._v(" + args + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("')'")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" obj.fn;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//测试一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("vaule")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value,\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": name,\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("age")]),s._v(": age\n    }\n}\nfoo.myCall3("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\nfoo.myCall3(obj,"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// {")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    value: 2,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    name: 'cxk',")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//    age: 18")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// }")]),s._v("\n")])]),t("h4",[s._v("apply")]),t("hr"),t("p",[s._v("apply 和 call 类似,直接给代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myApply = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj, arr")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = obj || "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("window")]),s._v(";\n    obj.fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(!arr){ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 没有第二个参数")]),s._v("\n        result = obj.fn()\n    }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = [];\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < arr.length; i++){\n            args.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'arr['")]),s._v(" + i + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("']'")]),s._v(");\n        }\n        result = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("eval")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'obj.fn('")]),s._v(" + args + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("')'")]),s._v(")\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("delete")]),s._v(" obj.fn;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result\n}\n")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/11"}},[s._v("JavaScript深入之闭包")])])]),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/lin-xin/blog/issues/7"}},[s._v("JavaScript中apply、call的详解")])])])]),t("p",[s._v("说明：本文大量参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},3095:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("this")]),t("hr"),t("p",[s._v("this有点复杂...很多问题没搞懂，简单总结下：")]),t("h5",[s._v("默认绑定")]),t("p",[s._v("还是这段代码，稍微修改下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"global scope"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("checkscope")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope2 = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'local scope'")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".scope)\n}\ncheckscope();\n")])]),t("p",[s._v("严格模式下会报错，非严格模式下会输出 global scope 。这是因为这里使用的是默认绑定规则：严格模式下 this 返回 undefined ，非严格模式下，this 的值为 undefined 的时候，其值会被隐式转换为全局对象。")]),t("blockquote",[t("p",[s._v("怎么知道这里应用了默认绑定呢？可以通过分析调用位置来看看 foo() 是如何调用的。在代码中，foo()是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则。 《你不知道的JavaScript上卷》")])]),t("h5",[s._v("隐式绑定")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\nobj.foo(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("blockquote",[t("p",[s._v("当 foo() 被调用时，它的落脚点确实指向 obj 对象。当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。 《你不知道的JavaScript上卷》")])]),t("p",[s._v("严格来说这个对象obj只是有一个foo属性引用了foo() 这函数，这个函数并不属于这个对象。比如：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("foo")]),s._v(": foo\n};\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = obj.foo; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 函数别名！")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"oops, global"')]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// a 是全局对象的属性")]),s._v("\nbar(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "oops, global"')]),s._v("\n")])]),t("p",[s._v("虽然 bar 是 obj.foo 的一个引用，但是实际上，它引用的是 foo 函数本身，因此此时的bar() 其实是一个不带任何修饰的函数调用,所以应用了默认绑定。")]),t("h5",[s._v("显式绑定")]),t("p",[s._v("JavaScript 提供的绝大多数函数以及你自己创建的所有函数都可以使用 call(..) 和 apply(..) 方法。")]),t("p",[s._v("它们的第一个参数是一个对象，它们会把这个对象绑定到this，接着在调用函数时指定这个 this。因为你可以直接指定 this 的绑定对象，因此我们称之为显式绑定。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("\n}\nfoo.call(obj); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\nfoo.apply(obj); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("h5",[s._v("new绑定")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".a = a;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" foo("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( bar.a ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为new 绑定。")]),t("p",[s._v("优先级：")]),t("ol",[t("li",[s._v("函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。 var bar = new foo()")]),t("li",[s._v("函数是否通过 call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是 指定的对象。 var bar = foo.call(obj2)")]),t("li",[s._v("函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上 下文对象。 var bar = obj1.foo()")]),t("li",[s._v("如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到 全局对象。 var bar = foo()")])]),t("h4",[s._v("闭包")]),t("hr"),t("p",[s._v("MDN 对闭包的定义为：")]),t("blockquote",[t("p",[s._v("闭包是指那些能够访问自由变量的函数。")])]),t("p",[s._v("自由变量是什么")]),t("blockquote",[t("p",[s._v("自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。")])]),t("p",[s._v("也就是说闭包是能够访问除函数参数和函数的局部变量之外的变量的函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a);\n}\nf()\n")])]),t("p",[s._v("那岂不是函数 f 也是闭包了? 还真是！")]),t("p",[s._v("《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。")]),t("p",[s._v("有点颠覆之前的认知了...")]),t("p",[s._v("别着急，这是理论上的闭包，其实还有一个实践角度上的闭包，让我们看看汤姆大叔翻译的关于闭包的文章中的定义：")]),t("p",[s._v("ECMAScript中，闭包指的是：")]),t("ul",[t("li",[s._v("从理论角度： "),t("ul",[t("li",[s._v("所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。")])])]),t("li",[s._v("从实践角度,以下函数才算是闭包： "),t("ul",[t("li",[s._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),t("li",[s._v("在代码中引用了自由变量")])])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"global scope"')]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("checkscope")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" scope = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"local scope"')]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("f")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" scope;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" f;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = checkscope();\nfoo();\n")])]),t("p",[s._v("再来分析下这段代码的执行过程：")]),t("ul",[t("li",[s._v("最先遇到全局代码，创建全局执行上下文并压入执行上下文栈：")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    globalContext\n];\n")])]),t("ul",[t("li",[s._v("然后初始化全局执行上下文，同时checkscope 函数会被创建，并且保存作用域链到其内部属性[[Scope]]。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscope.[[scope]] = [\n    globalContext.VO\n];\n")])]),t("ol",[t("li",[s._v("执行checkscope函数，准备阶段：创建 checkscope 函数执行上下文，checkscope 执行上下文被压入执行上下文栈：")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    checkscopeContext,\n    globalContext\n];\n")])]),t("ul",[t("li",[s._v("checkscope 执行上下文初始化，创建变量对象、作用域链、this；复制函数[[scope]]属性创建作用域链；初始化活动对后将活动对象压入作用域链最前端，同时 f 函数会被创建，并且保存作用域链到其内部属性[[Scope]]。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("checkscopeContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("scope")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v("\n    }，\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, [[Scope]]],\n}\n")])]),t("ul",[t("li",[s._v("checkscope 函数执行阶段：随着函数的执行，修改活动对象的值，最后返回函数 f，checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    checkscopeContext,\n    globalContext\n];\n")])]),t("ul",[t("li",[s._v("执行函数 f ，准备阶段：创建checkscope 函数执行上下文，checkscope 执行上下文被压入执行上下文栈：")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("ECStack = [\n    fContext,\n    globalContext\n];\n")])]),t("ul",[t("li",[s._v("f 执行上下文初始化，创建变量对象、作用域链、this；复制函数[[scope]]属性创建作用域链；初始化活动对后将活动对象压入作用域链最前端，同时 f 函数会被创建，并且保存作用域链到其内部属性[[Scope]]。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("fContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n    }，\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, [[Scope]]],\n}\n")])]),t("ul",[t("li",[s._v("f 函数执行阶段：从作用域链中查找 变量scope 并返回, f 函数执行完毕，f 函数上下文从执行上下文栈中弹出。")])]),t("p",[s._v("当 f 函数执行的时候，checkscope 函数上下文已经被销毁了啊(即从执行上下文栈中被弹出)，怎么还会读取到 checkscope 作用域下的 scope 值呢？")]),t("p",[s._v("当我们了解了具体的执行过程后，我们知道 f 执行上下文维护了一个作用域链：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("fContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, checkscopeContext.AO, globalContext.VO],\n}\n")])]),t("p",[s._v("就是因为这个作用域链，f 函数依然可以读取到 checkscopeContext.AO 的值，说明当 f 函数引用了 checkscopeContext.AO 中的值的时候，即使 checkscopeContext 被销毁了，但是 JavaScript 依然会让 checkscopeContext.AO 活在内存中，f 函数依然可以通过 f 函数的作用域链找到它，正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。")]),t("p",[s._v("再看之前对闭包的定义就好理解了：")]),t("blockquote",[t("ol",[t("li",[s._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),t("li",[s._v("在代码中引用了自由变量")])])]),t("h4",[s._v("循环和闭包")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" data = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; i++) {\n  data[i] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i);\n  };\n}\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]();\n")])]),t("p",[s._v("正常情况下，我们对这段代码行为的预期是分别输出数字 0,1,2 ，然而这段代码会输出3个3。")]),t("p",[s._v("当执行data[0]函数时,data[0] 函数的执行上下文为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("data["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]Context = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n        },\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, globalContext.VO]\n}\n")])]),t("p",[s._v("活动对象里并没有 i 的值,所以会根据作用域链去全局执行上下文的变量对象(全局对象)中查找，而此时全局执行上下文为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("globalContext = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("VO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(": [...],\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("i")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("\n    }\n}\n")])]),t("p",[s._v("执行data[0]函数时，循环已经结束了，所以此时i的值为3，所以三个函数最后都输出3。")]),t("p",[s._v("再改成闭包看看：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" data = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; i++) {\n  data[i] = ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("i")]),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i);\n        }\n  })(i);\n}\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]();\n")])]),t("p",[s._v("当执行到 data[0] 函数之前，data[0] 函数的作用域链发生了改变：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("data["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]Context = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("Scope")]),s._v(": [AO, 匿名函数Context.AO, globalContext.AO]\n}\n")])]),t("p",[s._v("data[0]Context 的 AO 还是没有 i 值，所以会沿着作用域链从匿名函数 Context.AO 中查找，而此时匿名函数 Context为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("匿名函数Context = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("AO")]),s._v(": {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("arguments")]),s._v(": {\n            "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("length")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n        },\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("i")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    }\n}\n")])]),t("p",[s._v("因为匿名函数接收参数，并且在循环的时候传入了实参 i ，所以活量对象里有变量 i ，因为在匿名函数Context.AO中找到了 i 的值，所以不会再去globalContext.VO 中查找了，即使 globalContext.VO 也有 i 的值(值为3)，所以这三个函数最后会输出我们预期的结果。")]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[s._v("你不知道的JavaScript（上卷）")]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/9"}},[s._v("JavaScript深入之闭包")])])]),t("p",[s._v("说明：本文大量参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},"3ee4":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("let 命令")]),t("hr"),t("p",[s._v("let 用法类似 var，用于声明变量，但是 let 命令声明的变量只在 let 命令的代码块内有效。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(b); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: a is not defined.")]),s._v("\n")])]),t("p",[s._v("所以 for 循环很适合使用 let 命令。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("; i++){\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: a is not defined.")]),s._v("\n")])]),t("p",[s._v("经典的闭包试题")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" data = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; i++) {\n  data[i] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i);\n  };\n}\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]();\n")])]),t("p",[s._v("上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，最后输出都是3。")]),t("p",[s._v("如果使用let，声明的变量仅在块级作用域内有效，最后输出的分别是0，1，2。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" data = [];\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; i++) {\n  data[i] = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i);\n  };\n}\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]();\ndata["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("]();\n")])]),t("p",[s._v("上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量。你可能会问，如果每一轮循环的变量 i 都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量 i 时，就在上一轮循环的基础上进行计算。")]),t("p",[s._v("另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("; i++) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n")])]),t("p",[s._v("上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。")]),t("h5",[s._v("不存在变量提升")]),t("p",[s._v("var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(foo); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n-----------------\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(bar); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错 ReferenceError")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" bar = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n")])]),t("h5",[s._v("暂时性死区")]),t("p",[s._v("只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" tmp = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(") {\n  tmp = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'abc'")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tmp;\n}\n")])]),t("p",[s._v("因为块级作用域内用 let 声明了局部变量 tmp，tmp 就被绑定在这个块级作用域中，所以在 tmp 被声明前使用就会报错。")]),t("p",[s._v("ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。")]),t("p",[s._v("总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。")]),t("p",[s._v("“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" a; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n")])]),t("p",[s._v("作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" undeclared_variable "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('// "undefined";')]),s._v("\n")])]),t("p",[s._v("解构赋值时会存在比较隐蔽的‘‘死区’’")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = y, y = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")])]),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\nbar() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n")])]),t("p",[s._v("上面代码中，调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于“死区”。如果y的默认值是x，就不会报错，因为此时x已经声明了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("x = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", y = x")]),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" [x, y];\n}\nbar(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// [2, 2]")]),s._v("\n")])]),t("p",[s._v("因为暂时性死区。使用let声明变量时，只要变量在还没有声明完成前使用，就会报错。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" x = x; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不报错")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" x = x; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError: x is not defined")]),s._v("\n")])]),t("p",[s._v("上面这行就属于这个情况，在变量x的声明语句还没有执行完成前，就去取x的值，导致报错”x 未定义“。")]),t("h5",[s._v("不允许重复声明")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(";\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v(";\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("fn1")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("arg")]),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arg;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不报错")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("fn2")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("arg")]),s._v(") ")]),s._v("{\n  {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arg;\n  }\n}\n")])]),t("h5",[s._v("块级作用域")]),t("p",[s._v("ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" tmp = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("();\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(tmp);\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v("){\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" tmp = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("123")]),s._v("\n  }\n}\nfoo(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n")])]),t("p",[s._v("因为内层的 var tmp 导致变量提升覆盖了外层的tmp,所以执行函数后输出结果为 undefined。")]),t("p",[s._v("第二种场景，用来计数的循环变量泄露为全局变量。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" str = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hello'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < str.length; i++){\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(str[i]);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(i); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 5")]),s._v("\n")])]),t("p",[s._v("上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。")]),t("p",[s._v("let 为 JavaScript 新增了块级作用域。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'out'")]),s._v("\n  {"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'inner'")]),s._v("}\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ")]),s._v("\n}\n")])])])}],!1,null,null,null);a.default=e.exports},5732:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){var s=this.$createElement;return(this._self._c||s)("section")}),[],!1,null,null,null);a.default=e.exports},"605d":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("作用域是什么")]),t("hr"),t("p",[s._v("作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。")]),t("h4",[s._v("编译原理")]),t("hr"),t("h5",[s._v("1.分词/词法分析")]),t("p",[s._v("会将代码分解成对编程语言来说有意义的代码块（词法单元）例如 var a = 2 ;会被分词为这些词法单元: var、a、=、2 和;")]),t("h5",[s._v("2.分析/语法分析")]),t("p",[s._v("将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。")]),t("h5",[s._v("3.代码生成")]),t("p",[s._v("将抽象语法树转换为可执行代码。用某种方法将 var a = 2 的抽象语法树装换为一组机器指令，用来创建一个变量 a 并将一个值（这里是 2）存储在 a 中。")]),t("h4",[s._v("JavaScript 的工作原理")]),t("hr"),t("ul",[t("li",[t("h5",[s._v("引擎")]),t("p",[s._v("从头到尾负责整个 JavaScript 程序的编译及执行过程。")])]),t("li",[t("h5",[s._v("编译器")]),t("p",[s._v("负责语法分析及代码生成等")])]),t("li",[t("h5",[s._v("作用域")]),t("p",[s._v("负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。")])])]),t("h5",[s._v("引擎、编译器和作用域会相互配合完成代码的解析。例如在解析 var a = 2;这段代码时，引擎会把它看成两个声明（var a 和 a = 2），一个由编译器在编译阶段处理，一个由引擎在运行时处理")]),t("ul",[t("li",[t("p",[s._v("遇到 var a 时编译器首先会询问作用域有没有同名为 a 的变量存在当前的作用域集合当中，如果有编译器会忽略掉这个声明，继续编译，否则在当前的作用域集合中声明一个名为 a 的变量")])]),t("li",[t("p",[s._v("接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续在上一级作用域中查找该变量。")])])]),t("h5",[s._v("引擎查找变量的方法：LHS 和 RHS")]),t("ul",[t("li",[t("p",[s._v("LHS 查询会试图找到变量本身并为其赋值")])]),t("li",[t("p",[s._v("RHS 查询会找到变量的值")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo(a) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a)\n}\nfoo("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n")])]),t("p",[s._v("上面代码中函数 foo（2）调用时引擎首先会对 foo 使用 RHS 查询找 foo 的值，接着会使用对参数 a 进行 LHS 查寻并赋值 2，到函数内部遇到 console 时也需要进行 RHS 查询 consloe 对象，并且检查是否有 log 这个方法，最后再使用 RHS 查询变量 a 并把值传给 console.log()。")]),t("h4",[s._v("异常")]),t("hr"),t("p",[s._v("为在变量还没有声明（在任何作用域中都无法找到该变量）的情况下 LHS 查询 和 RHS 查询的行为是不一样的。 考虑下面代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a + b);\n    b = a\n}\nfoo("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n")])]),t("p",[s._v("第一次对 b 进行 RHS 查询时是无法找到该变量的。也就是说，这是一个“未声明”的变量，因为在任何相关的作用域中都无法找到它，如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。 相较之下，当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非严格模式下。严格模式中 LHS 查询失败时，引擎会抛出同 RHS 询失败时类似的 ReferenceError 异常。")]),t("h4",[s._v("词法作用域")]),t("hr"),t("p",[s._v("词法作用域就是定义在词法阶段的作用域。也就是说词法作用域是由你在编写代码时将变量和块作用域定义在哪里来决定的。因此当词法分析器处理代码时（大部分情况下）会保持作用域不变。JavaScriptt 所采用的作用域模型就是词法作用域。")]),t("h4",[s._v("欺骗词法")]),t("p",[s._v("JavaScript 中的 eval()和 with 可以欺骗词法作用域，前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在运行时）。后者本质上是通过将个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。这两个机制的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。使用这其中任何一个机制都将导致代码运行变慢。")]),t("h4",[s._v("函数作用域和块作用域")]),t("hr"),t("p",[s._v("考虑下面代码")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 一些代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 更多的代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" c = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n}\n")])]),t("p",[s._v("在这个代码片段中，foo(..) 的作用域气泡中包含了标识符 a、b、c 和 bar。无论标识符声明出现在作用域中的何处，这个标识符所代表的变量或函数都将附属于所处的函数作用域气泡。")]),t("p",[s._v("bar(..) 拥有自己的作用域气泡气泡，在 bar（）的作用域气泡中也可以访问 foo（）作用域气泡中的标识符。全局作用域也有自己的作用域气泡，它只包含了一个标识符：foo。")]),t("p",[s._v("JavaScript 具有基于函数的作用域，既每声明一个函数都会创建一个函数作用域。每一个函数作用域中属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。")]),t("p",[s._v("从全局作用域中访问函数作用域中的变量会导致致 ReferenceError 错误：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("bar(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 失败")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a, b, c ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 三个全都失败")]),s._v("\n")])]),t("h4",[s._v("隐藏内部实现")]),t("hr"),t("p",[s._v("再考虑下面代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("doSomething")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("doSomethingElse")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" b;\n    b = a + doSomethingElse( a * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" );\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( b * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(" );\n}\ndoSomething( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 15")]),s._v("\n")])]),t("p",[s._v("b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制，也就是说这段代码中的任何声明（变量或函数）都将绑定在这个 doSomething(..) 函数的作用域中，换句话说，把变量和函数包裹在一个函数的作用域中，然后用这个作用域来“隐藏”它们。隐藏后功能性和最终效果都没有受影响，但是设计上将具体内容私有化了，设计良好的软件都会依此进行实现。")]),t("h4",[s._v("匿名和具名")]),t("hr"),t("ul",[t("li",[s._v("匿名函数表达式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("setTimeout( "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"I waited 1 second!"')]),s._v(";\n}, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" );\n")])]),t("p",[s._v("setTimeout 函数的第一个参数 function(){...}没有名称标识符，所以叫做匿名函数表达式，函数表达式可以是匿名的，而函数声明则不可以省略函数名。匿名函数表达式书写起来简单快捷，。但是它也有几个缺点需要考虑。")]),t("ol",[t("li",[t("p",[s._v("匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。")])]),t("li",[t("p",[s._v("如果没有函数名，当函数需要引用自身时只能使用已经过期的 arguments.callee 引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。")])]),t("li",[t("p",[s._v("匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。")])])]),t("p",[s._v("给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名（既使用具名函数）是一个最佳实践。")]),t("h4",[s._v("立即执行函数表达式")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n})();\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("由于函数被包含在一对 ( ) 括号内部，因此成为了一个表达式，通过在末尾加上另外一个( ) 可以立即执行这个函数。")]),t("h4",[s._v("块作用域")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (foo) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    bar = something( bar );\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( bar );\n}\n")])]),t("p",[s._v("bar 变量仅在 if 声明的上下文中使用，因此如果能将它声明在 if 块内部中会是一个很有意义的事情。但是，当使用 var 声明变量时，它写在哪里都是一样的，因为它们最终都会属于外部作用域（这里是属于全局作用域）。这段代码是为了风格更易读而伪装出的形式上的块作用域。")]),t("h4",[s._v("let")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (foo) {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" bar = foo * "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    bar = something( bar );"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( bar );\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( bar ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ReferenceError")]),s._v("\n")])]),t("p",[s._v("let 关键字可以将变量绑定到所在的任意作用域中（通常是 { .. } 内部）。因为 bar 是在 if(){..}中使用 let 声明的，所以在 if(){..}外部访问这个变量会导致 ReferenceError。")]),t("h4",[s._v("提升")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n")])]),t("p",[s._v("引擎会在解释 JavaScript 代码之前首先对其进行编译，编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。上面代码中 a 会在编译阶段被声明，而赋值则要等到执行阶段执行到指定的赋值语句。执行 console.log( a )时 a 已经被提前声明了所以不会报错，但此时 a 并没有被赋值，所以会输出 undefined。")]),t("p",[s._v("函数声明也会被提升：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo();\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a ); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n}\n")])]),t("p",[s._v("函数表达式不会被提升：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 不是 ReferenceError, 而是 TypeError!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])]),t("h4",[s._v("函数优先")]),t("hr"),t("p",[s._v("函数声明和变量声明都会被提升，但是函数会首先被提升，然后才是变量：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("foo(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//   会输出 1 而不是 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo;\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\nfoo = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(" )\n};\n")])]),t("h4",[s._v("闭包")]),t("hr"),t("p",[s._v("思考下面代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("bar")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( a );\n    }\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" bar;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" baz = foo();\nbaz(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n")])]),t("p",[s._v("函数 bar() 的词法作用域能够访问 foo() 的内部作用域。在这个例子中我们将 bar() 函数本身当作一个值类型当作函数 foo()的返回值。在 foo() 执行后，其返回值（也就是 bar()函数）赋值给 baz 并调用。bar()可以被正常调用执行，但此时他在自己被定义的词法作用域以外的地方执行。")]),t("p",[s._v("在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，但因为 bar()是在其内部定义的，它能够访问 foo()中内部作用域，而 bar()还引用着其作用域中的变量 a。该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。bar() 持有对该作用域的引用，而这个引用就叫作闭包。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i<="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("; i++) {\n    setTimeout( "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("timer")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( i );\n    }, i*"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" );\n}\n")])]),t("p",[s._v("正常情况下，我们对这段代码行为的预期是分别输出数字 1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次 6。这是因为延迟函数的回调会在循环结束时才执行，根据作用域的工作原理，尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。")]),t("p",[s._v("想要实现预期的效果，就需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" i="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i<="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("; i++) {\n    ("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("j")]),s._v(") ")]),s._v("{\n       setTimeout( "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("timer")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( j );\n        }, j*"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" );\n    })( i );\n}\n")])]),t("p",[s._v("把每个延迟执行函数都用一个立即执行函数包裹起来，这样每次循环创建的延迟执行函数都会有一个独立的作用域。有了独立的作用域，它们还需要有自己的变量，用来在每个迭代中储存 i 的值，可以将每次循环的 i 作为参数传递给立即执行函数，这样每个迭代中都会含有一个具有正确值的变量供我们访问。")]),t("p",[s._v("下面代码可以达到同样的效果：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("; i<="),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v("; i++) {\n    setTimeout( "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("timer")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log( i );\n    }, i*"),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(" );\n}\n")])]),t("p",[s._v("for 循环头部的 let 声明还会有一个特殊的行为。这个行为指出变量在循环过程中不止被声明一次，每迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。")])])}],!1,null,null,null);a.default=e.exports},7655:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("Promise 接收一个执行器（executor）函数，Promise 构造函数执行时立即调用该函数,该函数接受两个参数，分别是 resolve 函数和 reject 函数")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 第一版")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("executor")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n        实例的属性\n    */")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" that = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".status = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 初始状态")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".data = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("''")]),s._v("   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用来保存数据（成功时的value或失败时的reason）")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".callBacks = [] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 用来存储待执行回调 格式：{onFulfilled:<function>, onRejected:<function>}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n        resolve 和 reject 函数被调用时，分别将promise的状态改为 fulfilled（完成）和 rejected（失败）。\n    */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("resolve")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(")")]),s._v("{ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// resolve 函数接收一个参数作为 Promise 的结果值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 状态只允许改变一次，如果已经被改变直接返回")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(that.status !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v("){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 状态改为 fulfilled")]),s._v("\n        that.status = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'fulfilled'")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 保存数据")]),s._v("\n        that.data = value\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果已经有待执行的回调函数了，立即异步执该回调函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(that.callBacks.length){\n            that.callBacks.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(" =>")]),s._v("{\n                setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                    item.onFulfilled(that.data)\n                })\n            })\n        }\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("reject")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reason")]),s._v(")")]),s._v("{ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// reject 函数接收一个参数作为 Promise 失败的原因")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 状态只允许改变一次，如果已经被改变直接返回")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(that.status !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v("){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v("\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 状态改为 rejected")]),s._v("\n        that.status = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rejected'")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 保存数据")]),s._v("\n        that.data = reason\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果已经有待执行的回调函数了，立即异步执该回调函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(that.callBacks.length){\n            that.callBacks.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(" =>")]),s._v("{\n                setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                    item.onRejected(that.data)\n                })\n            })\n        }\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 执行 executor （执行器函数）")]),s._v("\n        executor(resolve, reject)\n    }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v("(error){ "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 可能会抛出异常，需要捕获并 reject 异常")]),s._v("\n        reject(error)\n    }\n}\n")])]),t("p",[s._v("简单的实现了 Promise 构造函数，来试试效果")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(")=>")]),s._v("{\n            reslove("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n    })\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p)\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('/*\n    callBacks: []\n    data: 1\n    status: "fulfilled"\n*/')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(")=>")]),s._v("{\n            reject("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n    })\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p)\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('/*\n    callBacks: []\n    data: 2\n    status: "rejected"\n*/')]),s._v("\n")])]),t("p",[s._v("好像效果还行，再来实现一下 Promise.prototype.then()方法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".prototype.then = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("onFulfilled, onRejected")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// then 方法接收两个回调函数作为参数，会根据 Promise 的状态来决定执行哪个回调")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同样先保存 this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" that = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n        判断当前 Promise 的状态\n    */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还没有改变状态，不能执行回调，所以先将回调保存到callBacks中")]),s._v("\n        that.callBacks.push({ onFulfilled, onRejected })\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'fulfilled'")]),s._v(") {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经成功 (fulfilled) 立即异步执行成功的回调函数 onFulfilled")]),s._v("\n        setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n            onFulfilled(that.data)\n        })\n    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经失败 (rejected) 立即异步执行失败的回调函数 onRejected")]),s._v("\n        setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n            onRejected(that.data)\n        })\n     }\n}\n")])]),t("p",[s._v("好像很简单的实现了，试试效果：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(") =>")]),s._v(" {\n    reslove("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n})\np1.then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n    }\n)\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(") =>")]),s._v(" {\n    reject("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n})\np1.then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v)\n    },\n    r => {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(r) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n    }\n)\n")])]),t("p",[s._v("可是 Promise 是支持链式调用的,也就是说 then 方法会返回一个新的Promise 实例，而且新返回的 Promise 实例的状态是由回调函数的结果来决定的。修改一下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".prototype.then = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("onFulfilled, onRejected")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// then 方法接收两个回调函数作为参数，会根据 Promise 的状态来决定执行哪个回调")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同样先保存 this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" that = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* then 方法会返回一个新的 Promise, 新返回的 Promise 的状态由 onFulfilled 或 onRejected 的结果决定，会有三种情况\n        1. result 是 Promise 的实例，要返回的 Promise 的状态 就是 result 的状态，值就是 result 的结果\n        2. result 不是 Promise 的实例，要返回的 Promise 的状态为 resolve,值为 result\n        3. 程序抛出异常 要返回的 Promise 的状态为 reject,值为抛出的异常\n    */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            判断当前 Promise 的状态\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还没有改变状态，不能执行回调，所以先将回调保存到callBacks中")]),s._v("\n            that.callBacks.push({ onFulfilled, onRejected })\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'fulfilled'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经成功 (fulfilled) 立即异步执行成功的回调函数 onFulfilled")]),s._v("\n            setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result = onFulfilled(that.data)\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (result "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(") {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. result 是 Promise的实例，要返回的 Promise 的状态 就是 result 的状态，值就是 result 的结果")]),s._v("\n                        result.then(resolve, reject)\n                    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2. result 不是 Promise的实例，要返回的 Promise 的状态为 resolve,值为 result")]),s._v("\n                        resolve(result)\n                    }\n                } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (error) {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3. 程序抛出异常 要返回的 Promise 的状态为 reject, 值为抛出的异常")]),s._v("\n                    reject(error)\n                }\n            })\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经失败 (rejected) 立即异步执行失败的回调函数 onRejected")]),s._v("\n            setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result = onRejected(that.data)\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (result "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(") {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. result 是 Promise的实例，要返回的 Promise 的状态 就是 result 的状态，值就是 result 的结果")]),s._v("\n                        result.then(resolve, reject)\n                    } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2. result 不是 Promise的实例，要返回的 Promise 的状态为 resolve,值为 result")]),s._v("\n                        resolve(result)\n                    }\n                } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (error) {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3. 程序抛出异常 要返回的 Promise 的状态为 reject, 值为抛出的异常")]),s._v("\n                    reject(error)\n                }\n            })\n        }\n    })\n}\n")])]),t("p",[s._v("测试一下")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(") =>")]),s._v(" {\n    reslove("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n}).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(")=>")]),s._v("{\n            reject("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n        })\n    },\n    r => {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(r)\n    }\n).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("v")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(v)\n    },\n    r => {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(r) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2")]),s._v("\n    }\n)\n")])]),t("p",[s._v("现在支持链式调用了,也能正确的处理返回的 Promise 的结果了，但是代码的封装性是不是太差了，而且当 Promise 是 pending 状态时，我们直接调用了回调函数，并没有返回新的 Promise 实例。另外如果 then 方法接收到的不是一个函数，会将值往下传（onFulfilled）或者抛出错误")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 最终版")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".prototype.then = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("onFulfilled, onRejected")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// then 方法接收两个回调函数作为参数，会根据 Promise 的状态来决定执行哪个回调")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同样先保存 this")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" that = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 onResolved 不是一个函数，将值往下传")]),s._v("\n    onFulfilled = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" onFulfilled === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(" ? onFulfilled : "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" value\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 onRejected 不是一个函数， 抛出一个异常")]),s._v("\n    onRejected = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" onRejected === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(" ? onRejected : "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reason")]),s._v(" =>")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" reason }\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* then 方法会返回一个新的 Promise, 新返回的 Promise 的状态（resolve 或 reject）由 onResolved 或 onRejected 的结果决定，会有三种情况\n        1. result 是 Promise的实例，要返回的 Promise 的状态 就是 result 的状态，值就是 result 的结果\n        2. result 不是 Promise的实例，要返回的 Promise 的状态为 resolve,值为 result\n        3. 程序抛出异常 要返回的 Promise 的状态为 reject,值为抛出的异常\n    */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 封装一个处理结果的函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("handleResult")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("callBack")]),s._v(") ")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" result = callBack(that.data)\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (result "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(") {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1. result 是 Promise的实例，要返回的 Promise 的状态 就是 result 的状态，值就是 result 的结果")]),s._v("\n                    result.then(resolve, reject)\n                } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 2. result 不是 Promise的实例，要返回的 Promise 的状态为 resolve,值为 result")]),s._v("\n                    resolve(result)\n                }\n            } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("catch")]),s._v(" (error) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 3. 程序抛出异常 要返回的 Promise 的状态为 reject, 值为抛出的异常")]),s._v("\n                reject(error)\n            }\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            判断当前 Promise 的状态\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'pending'")]),s._v(") { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还没有改变状态，不能执行回调，所以先将回调保存到callBacks中")]),s._v("\n            that.callBacks.push({\n                onFulfilled() {\n                    handleResult(onFulfilled)\n                },\n                onRejected() {\n                    handleResult(onRejected)\n                }\n            })\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (that.status === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'fulfilled'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经成功 (fulfilled) 立即异步执行成功的回调函数 onFulfilled")]),s._v("\n            setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                handleResult(onFulfilled)\n            })\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise 已经成功 (rejected) 立即异步执行成功的回调函数 onRejected")]),s._v("\n            setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                handleResult(onRejected)\n            })\n        }\n    })\n    }\n")])]),t("p",[s._v("then方法基本实现了,再实现一些常用的api")]),t("h5",[s._v("Promise.prototype.catch()")]),t("p",[s._v("Promise.prototype.catch方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。所以很简单就能实现")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".prototype.catch = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("onRejected")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".then("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("undefined")]),s._v(", onRejected)\n}\n")])]),t("h5",[s._v("Promise.resolve(value)")]),t("p",[s._v("返回一个状态由给定value决定的Promise对象。会有几种情况：")]),t("ol",[t("li",[s._v("如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。")]),t("li",[s._v("如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。")]),t("li",[s._v("Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象，值为undefined。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果参数是MyPromise实例，直接返回这个实例")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(value "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 否则返回一个新的 Promise 对象，状态为 resolved")]),s._v("\n        resolve(value)\n    })\n}\n")])]),t("h5",[s._v("Promise.reject(value)")]),t("p",[s._v("Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" reject(value))\n}\n")])]),t("h5",[s._v("Promise.all(iterable)")]),t("p",[s._v("Promise.all()方法接受一个iterable作为参数，iterable里的元素都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例。all方法会返回一个 Promise 实例，它的状态由参数的结果决定：")]),t("ol",[t("li",[s._v("只有 iterable 里的元素的状态都变成fulfilled，返回的 Promise 实例的状态才会变成fulfilled")]),t("li",[s._v("只要 iterable 里的元素之中有一个被rejected，返回的 Promise 实例的状态就变成rejected")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".all = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("list")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" tempArr = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v("(list.length),\n        count = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n        list.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item, index")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数组参数如果不是 Promise 实例，先调用 Promise.resolve 转换")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve(item).then(\n                "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n                    count++\n                    tempArr[index] = value\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只有数组中所以元素的状态都变成fulfilled，返回的Promise状态才会变成fulfilled")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(count === list.length){\n                        resolve(tempArr)\n                    }\n                },\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只要数组里的元素之中有一个被rejected，返回的 Promise 实例的状态就变成rejected")]),s._v("\n                reason => {\n                    reject(reason)\n                }\n            )\n        })\n    })\n}\n")])]),t("h5",[s._v("Promise.race(iterable)")]),t("p",[s._v("Promise.all()方法接受一个iterable作为参数,Promise.race()方法的参数与Promise.all()方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve()方法，将参数转为 Promise 实例。不同的是当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".race = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("list")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" {\n        list.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve(item).then(\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只要有一个实例率先改变状态，新的 Promise 的状态就跟着改变")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n                    resolve(value)\n                },\n                reason => {\n                    reject(reason)\n                }\n            )\n        })\n    })\n}\n")])]),t("hr"),t("p",[s._v("说明：本文是本人对 Promise 的一些简单的理解，如有错误还望指出。")])])}],!1,null,null,null);a.default=e.exports},"7c1b":function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("防抖")]),t("hr"),t("p",[s._v("对于连续触发的事件，只在事件停止触发的 n 秒后再执行事件。也就是说在一个事件触发的 n 秒内又触发了这个事件，那就以新的事件的时间为准，n 秒后才执行，就是要等你触发完事件的 n 秒内不再触发事件，才执行。")]),t("p",[s._v("根据描述，实现第一版代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        clearTimeout(timeout);\n        timeout = setTimeout(fun, wait)\n    }\n}\ncontainer.onmousemove = debounce(getUserAction, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1000")]),s._v(");\n")])]),t("p",[s._v("现在随你怎么移动，反正你移动完 1000ms 内不再触发，我才执行事件。看看使用效果：")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/debounce/debounce-1.gif",alt:"s"}})]),t("p",[s._v("如果我们在 getUserAction 函数中 console.log(this)，在不使用 debounce 函数的时候，this 的值为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-html"}},[t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"container"')]),s._v(">")]),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n")])]),t("p",[s._v("但是如果使用我们的 debounce 函数，this 就会指向 Window 对象（由setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致，这些代码中包含的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined，这和所期望的this的值是不一样的。）！所以要将 this 指向正确的对象。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n        clearTimeout(timeout)\n        timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n            fun.apply(self);\n        }, wait)\n    }\n}\n")])]),t("p",[s._v("现在 this 已经可以正确指向了。但JavaScript 在事件处理函数中会提供事件对象 event，所以还要为要防抖的函数提供 event 对象：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(",\n            args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        clearTimeout(timeout);\n        timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n            fun.apply(self, args)\n        }, wait)\n    }\n}\n")])]),t("p",[s._v("有时候会有希望立刻执行函数，然后等到停止触发 n 秒后，才可以重新触发执行的需求，所以再改进下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait, immediate")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(",\n            args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(timeout) clearTimeout(timeout);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(immediate){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" callNow = !timeout;"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// clearTimeout(timeout) 后 timeout 依然是 true")]),s._v("\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n            }, wait)\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(callNow) fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(")\n            }, wait)\n        }\n    }\n}\n")])]),t("p",[s._v("效果：")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/debounce/debounce-4.gif",alt:"立刻执行"}})]),t("p",[s._v("第一次触发会立即执行，之后会等到停止触发 n 秒后，才可以继续触发执行。")]),t("p",[s._v("需要防抖的函数可能会有返回值，所以也要返回函数的执行结果，但是当 immediate 为 false 的时候，因为使用了 setTimeout ，我们将 func.apply(context, args) 的返回值赋给变量，最后再 return 的时候，值将会一直是 undefined，所以我们只在 immediate 为 true 的时候返回函数的执行结果。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait, immediate")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout, result;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(",\n            args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(timeout) clearTimeout(timeout);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(immediate){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" callNow = !timeout;"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// clearTimeout(timeout) 后 timeout 依然是 true")]),s._v("\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n            }, wait)\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(callNow) result = fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(")\n            }, wait)\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n    }\n}\n")])]),t("p",[s._v("最后希望能取消 debounce 函数，比如说我 debounce 的时间间隔是 10 秒钟，immediate 为 true，这样的话，我只有等 10 秒后才能重新触发事件，现在我希望有一个按钮，点击后，取消防抖，这样我再去触发，就可以又立刻执行啦")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("debounce")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait, immediate")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout, result;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" debounced = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(",\n            args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(timeout) clearTimeout(timeout);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(immediate){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" callNow = !timeout;"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// clearTimeout(timeout) 后 timeout 依然是 true")]),s._v("\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n            }, wait)\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(callNow) result = fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                fun.apply(self, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(")\n            }, wait)\n        }\n         "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result;\n    }\n    debounced.cancel = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        clearTimeout(timeout);\n        timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n    }\n}\n")])]),t("h4",[s._v("节流")]),t("hr"),t("p",[s._v("节流就是对于持续触发的事件，每隔一段事件，只执行一次事件。")]),t("p",[s._v("根据首次是否执行以及结束后是否执行，效果有所不同，实现的方式也有所不同。我们用 leading 代表首次是否执行，trailing 代表结束后是否再执行一次。")]),t("p",[s._v("节流有两种主流的实现方式，一种是使用时间戳，一种是设置定时器。")]),t("p",[s._v("使用时间戳：触发事件的时候，获取当前的时间戳，然后减去之前的时间戳（一开始设置为0），如果大于设置的时间周期就执行函数，然后更新时间戳为当前时间戳，如果小于就不执行。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("throttle")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self, args,\n        previous = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" now = +"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 先获取时间戳再给self，args赋值相对会准一点..")]),s._v("\n        self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n        args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(now - previous > wait){\n            fun.apply(self, args);\n            previous = now;\n        }\n    }\n}\n")])]),t("p",[s._v("效果：")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/throttle/throttle1.gif",alt:"时间戳"}})]),t("p",[s._v("鼠标移入的时候，事件立刻执行，每过 1s 会执行一次，如果在 5.2s 停止触发，以后不会再执行事件。")]),t("p",[s._v("使用定时器：当触发事件的时候，设置一个定时器，再触发时间的时候如果已经有定时器了就不执行，知道定时器执行，然后再执行函数，清空定时器，这样就可以设置下个定时器。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("throttle")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout,args,self;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n        args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(!timeout){\n            timeout = setTimeout("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n                timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n                fun.apply(self, args)\n            }, wait)\n        }\n    }\n}\n")])]),t("p",[s._v("为了让效果更加明显，我们设置 wait 的时间为 3s，效果演示如下：")]),t("p",[t("img",{attrs:{src:"https://github.com/mqyqingfeng/Blog/raw/master/Images/throttle/throttle2.gif",alt:"定时器"}})]),t("p",[s._v("可以看到：当鼠标移入的时候，事件不会立刻执行，晃了 3s 后终于执行了一次，此后每 3s 执行一次，当数字显示为 3 的时候，立刻移出鼠标，相当于大约 9.2s 的时候停止触发，但是依然会在第 12s 的时候执行一次事件。")]),t("p",[s._v("所以比较两个方法：")]),t("ol",[t("li",[s._v("第一种事件会立刻执行，第二种事件会在 n 秒后第一次执行")]),t("li",[s._v("第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后依然会再执行一次事件")])]),t("p",[s._v("能不能双剑合璧，鼠标移入能立刻执行，停止触发的时候还能再执行一次：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("throttle")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("fun, wait")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" timeout,args,self,now,remaining,\n        previous = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" later = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        previous = +"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("();\n        timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n        fun.apply(self, args)\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" throttled = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        now = +"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("();\n        self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n        args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(";\n        remainning = wait - (now - previous);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(remainning <= "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(" || remaining > wait){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(timeout){\n                clearTimeout(timeout);\n                timeout = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(";\n            }\n            previous = now;\n            fun.apply(self, args);\n        }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(!timeout){\n            timeout = setTimeout(later, ramaining);\n        }\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" throttled;\n}\n")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/22"}},[s._v("JavaScript专题之跟着underscore学防抖")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/26"}},[s._v("avaScript专题之跟着 underscore 学节流")])])]),t("p",[s._v("说明：本文全部参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},a8a6:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("原型")]),t("hr"),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{};\nPerson.prototype.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 只有函数才会有prototype属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p1.name, p2.name)   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk, cxk")]),s._v("\n")])]),t("p",[s._v("上面代码中创建了一个构造函数 Person ,然后使用 new (或者说是：函数 Person 使用 new 关键字来构造调用？)创建了两个实例对象(p1, p2)。")]),t("p",[s._v("绝大部分函数都有一个 prototype 属性,它会指向一个对象，它指向的这个对象就是实例的原型。也就是说上例中的 Person 构造函数的 prototype 属性的值就是 p1, p2 的原型。")]),t("h4",[s._v("__proto__")]),t("hr"),t("p",[s._v("每一个 JavaScript 对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p.__proto__ === Person.prototype); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),t("p",[s._v("当读取实例的属性时，如果找不到，就会去查找和对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。就像第一个例子 中 p1, p2 都没有定义 name 属性，查找的时候找不到就会去找原型( Person.prototype )中找，所以返回的都是 “cxk”。简单证明一下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" p2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\nPerson.prototype.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(";\np1.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wyf'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p1.name, p2.name) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wyf, cxk")]),s._v("\n")])]),t("h4",[s._v("原型的原型")]),t("hr"),t("p",[s._v("前面说到读取实例的属性时如果找不到会去原型中查找，如果还找不到，就去找原型的原型... 原型的原型又是什么？")]),t("p",[s._v("前面说过函数的 prototype 属性指向的是一个对象，也就是说原型是一个对象，所以它也有一个 __proto__ 属性,这个属性会指向该对象的原型...那还有完没完？")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" obj = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\nobj.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(obj.name) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n")])]),t("p",[s._v("我们知道通过 JavaScript 内置的构造函数 Object 可以创建对象，其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以最终会查找到 Object.prototype.__proto__ 为止。那 Object.prototype.__proto__的值又是什么呢？")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".prototype.__proto__) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// null")]),s._v("\n")])]),t("p",[s._v("盗一张图关系图... : "),t("img",{attrs:{src:"https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/prototype5.png",alt:"原型链",title:"原型链"}})]),t("p",[s._v("蓝色的线就是原型链")]),t("h4",[s._v("constructor")]),t("hr"),t("p",[s._v("constructor 是什么鬼？")]),t("p",[s._v("是原型对象上的一个属性。他会指向关联的构造函数。也就是说每一个构造函数上的 prototype 属性指向的原型对象上会有一个 constructor 属性指向关联的构造函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(Person === Person.prototype.constructor); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// true")]),s._v("\n")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[s._v("你不知道的JavaScript（上卷）")]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/2"}},[s._v("JavaScript深入之从原型到原型链")])])]),t("p",[s._v("图片来源：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/2"}},[s._v("JavaScript深入之从原型到原型链")])])]),t("p",[s._v("说明：本文大量参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},bad3:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("Vue不同组件之间是怎么通信的?")]),t("ul",[t("li",[s._v("父子组件用props/$emit")]),t("li",[s._v("非父子组件用Event Bus通信")]),t("li",[s._v("如果项目够复杂,可能需要Vuex等全局状态管理库通信")])]),t("p",[s._v("不过在很多情况之下，我们的应用程序不需要类似Vuex这样的库来处理组件之间的数据通讯，而可以考虑Vue中的 事件总线 ，即 "),t("em",[s._v("EventBus")]),s._v("。")]),t("h5",[s._v("EventBus的简介")]),t("p",[s._v("EventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的灾难，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。")]),t("h5",[s._v("全局使用EventBus")]),t("p",[s._v("在用 vue-cli 创建的项目中可以 main.js 文件中添加如下代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" EventBus = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Vue();\nVue.prototype.$bus = EventBus\n")])]),t("p",[s._v("现在假设有两个如下的兄弟组件：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-vue"}},[s._v('\x3c!-- UpdateMessage.vue --\x3e\n<template>\n  <div>\n      <input type="text" v-model="message">\n      <button @click="updateMessage">update</button>\n  </div>\n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            message:\'\'\n        }\n    },\n    methods: {\n        updateMessage(){\n            this.$bus.$emit(\'updateMessage\',this.message)\n        }\n    }\n}\n<\/script>\n')])]),t("p",[s._v("在 UpdateMessage 组件中触发 updateMessage 事件,同时在 ShowMessage 组件中监听该事件:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-vue"}},[s._v("\x3c!-- ShowMessage.vue --\x3e\n<template>\n  <h1>\n      {{message}}\n  </h1>\n</template>\n\n<script>\nexport default {\n    data () {\n        return {\n            message:''\n        }\n    },\n    created () {\n        this.$bus.$on('updateMessage',(value)=>{\n            this.message = value\n        })\n    }\n}\n<\/script>\n")])]),t("p",[s._v("从上面的代码中，我们可以看到 ShowMessage 组件侦听一个名为 updateMessage 的特定事件，这个事件在组件实例化时被触发，或者你可以在创建组件时触发。另一方面，我们有另一个组件 UpdateMessage，它有一个按钮，当有人点击它时，使用 Vue 提供的 api 非常容易就实现了 EventBus。")]),t("p",[s._v("上面主要是使用了 Vue 提供的 api 很容易就实现了，我们也可与试着自己实现一个 Event 类来模拟 JavaScript 的 Event")]),t("h5",[s._v("初始化")]),t("p",[s._v("我们利用 ES6 的 class 关键字对 Event 进行初始化Event的事件清单。")]),t("p",[s._v("我们选择了 Map 作为储存事件的结构,因为作为键值对的储存方式 Map 比一般对象更加适合,我们操作起来也更加简洁。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Event")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("()\n    }\n}\n")])]),t("h5",[s._v("监听和触发")]),t("p",[s._v("我触发监听函数我们可以用apply与call两种方法确保 this 的指向")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Event")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("()\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 触发名为 eventType 的事件")]),s._v("\n    emit(eventType, ...args){\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" handler,\n            argsLen = args.length\n        ;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从存储事件的 Map 中获取事件对应的回调函数")]),s._v("\n        handler = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.get(eventType)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(argsLen > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("){\n            handler.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", args)\n        }"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v("{\n            handler.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听名为 eventType 的事件")]),s._v("\n    on(eventType, cb) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将事件及对应的回调函数存入 this.events")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(!"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.get(eventType)){\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.set(eventType, cb)\n        }\n    }\n}\n")])]),t("p",[s._v("我们实现了触发事件的emit方法和监听事件的addListener方法,至此我们就可以进行简单的实践了。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 创建一个 Event 实例")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" event = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Event();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听名为 print 的事件，并为这个事件添加一个回调函数")]),s._v("\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 触发 print 事件")]),s._v("\nevent.emit("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'事件被触发了'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 回调函数成功执行输出： print 事件被触发了")]),s._v("\n")])]),t("p",[s._v("似乎不错,我们实现了基本的触发/监听,但是如果有多个监听者呢?")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 重复监听同于一个事件")]),s._v("\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print1 "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print2 "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 触发 print 事件")]),s._v("\nevent.emit("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'事件被触发了'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// print1 事件被触发了")]),s._v("\n")])]),t("p",[s._v("只会触发一次，而且是只会触发第一个。")]),t("h5",[s._v("改进")]),t("p",[s._v("on 方法确实是很不健全，在绑定第一个监听后就无法对后续的进行绑定了，因此：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Event")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("()\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 触发名为 eventType 的事件")]),s._v("\n    emit(eventType, ...args) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 对应的 emit 方法也需要改进")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" handler,\n            argsLen = args.length\n            ;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从存储事件的 Map 中获取事件对应的回调函数")]),s._v("\n        handler = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.get(eventType)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".isArray(handler)) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是一个数组说明有多个监听者,需要依次此触发里面的函数")]),s._v("\n            handler.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("item")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (argsLen > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n                    item.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", args)\n                } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                    item.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n                }\n            })\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (argsLen > "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") {\n                handler.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", args);\n            } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                handler.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(");\n            }\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听名为 eventType 的事件")]),s._v("\n    on(eventType, cb) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 先获取对应事件名的回调函数清单")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" handler = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.get(eventType);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (!handler) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将事件及对应的回调函数存入 this.events")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.set(eventType, cb)\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (handler && "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" handler === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果事件清单中已经有一个回调函数了,多个监听者我们需要用数组储存")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.set(eventType, [handler, cb])\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            handler.push(cb) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 已经有多个监听者,那么直接往数组里push函数即可")]),s._v("\n        }\n    }\n}\n")])]),t("p",[s._v("至此，可以愉快的触发多个函数了")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 重复监听同于一个事件")]),s._v("\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print1 "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print2 "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\nevent.on("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(",e => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("`print3 "),t("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("${e}")]),s._v("`")]),s._v(");\n})\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 触发 print 事件")]),s._v("\nevent.emit("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'print'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'事件被触发了'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// print1 事件被触发了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// print2 事件被触发了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// print3 事件被触发了")]),s._v("\n")])]),t("p",[s._v("还需要一个移除监听函数的方法")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Event")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events || "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Map")]),s._v("()\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    remove(eventType, cb) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 同样先获取事件名对应的回调函数清单")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" handler = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.get(eventType)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (handler && "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" handler === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'function'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是函数,说明只被监听了一次, 直接删除函数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".events.delete(eventType, cb)\n        } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" postion;\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果 handler 是数组,说明被监听多次要找到对应的函数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" i = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < handler.length; i++) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (handler[i] === fn) {\n                    postion = i;\n                } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                    postion = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(";\n                }\n            }\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果找到匹配的函数,从数组中清除")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (postion !== "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v(") {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 找到数组对应的位置,直接清除此回调")]),s._v("\n                handler.splice(postion, "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果清除后只有一个函数,那么取消数组,以函数形式保存")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (handler.length === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._events.set(type, handler["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("]);\n                }\n            } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n            }\n        }\n    }\n}\n")])]),t("p",[s._v("至此，已经基本完成了Event最重要的几个方法，可以说一个Event的骨架是被我们开发出来了,但是它仍然有不足和需要补充的地方。")]),t("ul",[t("li",[s._v("没有对参数进行充分的判断,没有完善的报错机制")]),t("li",[s._v("没有监听者上限")]),t("li",[s._v("...")])]),t("hr"),t("p",[s._v("说明：本文是本人对 Event 的一些简单的理解，如有错误还望指出。")])])}],!1,null,null,null);a.default=e.exports},c444:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("bind")]),t("hr"),t("blockquote",[t("p",[s._v("bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )")])]),t("p",[s._v("即 bind 方法会：")]),t("ol",[t("li",[s._v("返回一个函数")]),t("li",[s._v("可以传入参数，并把this指向第一个参数,后面的参数会作为 bind 返回的函数的参数")])]),t("p",[s._v("第一版：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myBind = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" self.apply(obj);\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 测试一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo.myBind(obj)\nbar() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1")]),s._v("\n")])]),t("p",[s._v("第一版确定了 this 的指向，实现了返回一个函数，考虑到绑定函数可能是有返回值，所以 return self.apply(obj)。")]),t("p",[s._v("再来实现传参：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myBind2 = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取 myBind2 的第二个到最后一个参数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 这里的 arguments 是 bind 返回的函数的参数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bindArgs = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(")\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" self.apply(obj, args.concat(bindArgs));\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 测试一下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value, name, age)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bar = foo.myBind2(obj,"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(")\nbar("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 1 cxk 18")]),s._v("\n")])]),t("p",[s._v("好像很轻松实现了，然而还没完，bind 还有一个特点就是：")]),t("blockquote",[t("p",[s._v("一个绑定函数也能使用 new 操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。")])]),t("p",[s._v("也就是说当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效。举个例子：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("foo")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".habit = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rap'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value);\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(name);\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(age);\n}\nfoo.prototype.friend = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wyf'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" Bar = foo.bind(obj, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" baz = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Bar("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// undefinde cxk 18")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(baz.habit) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// rap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(baz.friend) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wyf")]),s._v("\n")])]),t("p",[s._v("要实现这点就要修改返回的函数的原型：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myBind3 = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fBound = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bindArgs = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 以上面的 demo 为例，当 fBound 函数(Bar)作为构造函数时 this 指向实例(baz)，此时为条件为 true，实例(baz)可以获取来自绑定函数的值；")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//作为普通函数时，this指向 window 条件为 false，将绑定函数的 this 指向 obj")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" self.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" fBound ? "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" : obj, args.concat(bindArgs));\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 修改返回函数的 prototype 为绑定函数的 prototype，实例就可以继承绑定函数的原型中的值")]),s._v("\n    fBound.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".prototype;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fBound;\n}\n")])]),t("p",[s._v("第三版中直接将 fBound.prototype = this.prototype, 修改fBound.prototype 的时候也会直接修改绑定函数的 prototype。所以需要一个空函数中转：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.myBind4 = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fNOP = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{};\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fBound = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bindArgs = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" self.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" fNOP ? "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" : obj, args.concat(bindArgs));\n    }\n    fNOP.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".prototype;\n    fBound.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" fNOP();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fBound;\n}\n")])]),t("p",[s._v("调用 bind 函数的必须是一个函数：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v("){\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Error")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Function.prototype.bind - what is trying to be bound is not callable"')]),s._v(")\n}\n")])]),t("p",[s._v("最终代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.bind = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Function")]),s._v(".prototype.bind || "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" !== "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v("){\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Error")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Function.prototype.bind - what is trying to be bound is not callable"')]),s._v(")\n    };\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" self = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" args = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fNOP = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" fBound = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" bindArgs = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" self.apply("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" fNOP ? "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" : obj, args.concat(bindArgs));\n    }\n    fNOP.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".prototype;\n    fBound.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" fNOP();\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fBound;\n}\n")])]),t("h4",[s._v("new")]),t("hr"),t("blockquote",[t("p",[s._v("new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一")])]),t("p",[s._v("人话：")]),t("ol",[t("li",[s._v("可以访问 Trainee 函数里的属性")]),t("li",[s._v("可以访问 Trainee.prototype 中的属性")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Trainee")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".age = age;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".habit = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rap'")]),s._v("\n}\nTrainee.prototype.hairstyle = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'middleScore'")]),s._v(";\nTrainee.prototype.greet = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'我是练习时长两年半的练习生'")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Trainee("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p.name, p.habit, p.hairstyle) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk rap middleScore")]),s._v("\np.greet() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我是练习时长两年半的练习生cxk")]),s._v("\n")])]),t("p",[s._v("因为 new 是关键字，没法覆盖，所以写一个函数来模拟：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Trainee")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    ...\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("objectFactory")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("Trainee, ...")]),s._v(")")]),s._v("{}; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//和 new Trainee(...)一样的效果")]),s._v("\n")])]),t("p",[s._v("因为 new 会返回一个对象，所以要创建对象并返回，而且对象会具有 Trainee 构造函数里的属性(如：this.name = name)，所以可以用 Trainee.apply(obj, arguments)来给对象添加属性。")]),t("p",[s._v("对象还可以访问 Trainee.prototype 中的属性，所以 obj.__proto__ = Trainee.prototype。")]),t("p",[s._v("所以第一版代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("objectFactory")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    Constructor  = [].shift.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    obj.__proto__ = Constructor.prototype;\n    Constructor.apply(obj, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" obj;\n}\n")])]),t("ol",[t("li",[s._v("用new Object() 的方式新建了一个对象 obj")]),t("li",[s._v("取出第一个参数，就是我们要传入的构造函数。此外因为 shift 会修改原数组，所以 arguments 会被去除第一个参数")]),t("li",[s._v("将 obj 的原型指向构造函数，这样 obj 就可以访问到构造函数原型中的属性 使用 apply，改变构造函数 this 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性")]),t("li",[s._v("返回 obj")])]),t("hr"),t("p",[s._v("测试一下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("functiono bjectFactory(){\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    Constructor  = [].shift.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    obj.__proto__ = Constructor.prototype;\n    Constructor.apply(obj, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" obj;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Trainee")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".age = age;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".habit = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rap'")]),s._v("\n}\nTrainee.prototype.hairstyle = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'middleScore'")]),s._v(";\nTrainee.prototype.greet = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'我是练习时长两年半的练习生'")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = objectFactory(Trainee, "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p.name, p.age, p.habit, p.hairstyle) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk 18 rap middleScore")]),s._v("\np.greet() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 我是练习时长两年半的练习生cxk")]),s._v("\n")])]),t("p",[s._v("构造函数可能会有返回值：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Trainee")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".age = age;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": name,\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("habit")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rap'")]),s._v("\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Trainee("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p.name, p.age, p.habit) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk undefined rap")]),s._v("\n")])]),t("p",[s._v("构造函数返回了一个对象，在实例 p 中只能访问返回的对象中的属性。")]),t("p",[s._v("构造函数返回还有可能返回一个基本类型值：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Trainee")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".habit = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'rap'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'sing dance basketball'")]),s._v("\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Trainee("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(p.name, p.age, p.habit) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk undefined rap")]),s._v("\n")])]),t("p",[s._v("尽管有返回值，但是相当于没有返回值进行处理。")]),t("p",[s._v("所以还需要判断返回的值是不是一个对象，如果是一个对象，我们就返回这个对象，如果没有，我们该返回什么就返回什么。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("objectFactory")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" obj = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    Construtor = [].shift.call("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    obj.__proto__ = Construtor.prototype;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" result = Construtor.apply(obj, "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("arguments")]),s._v(");\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" result === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"object"')]),s._v(" ? result : obj;\n}\n")])]),t("p",[s._v("参考：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/12"}},[s._v("JavaScript深入之闭包bind的模拟实现")])])]),t("p",[s._v("说明：本文大量参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},e70b:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h4",[s._v("创建对象的多种方式及优缺点")]),t("ul",[t("li",[s._v("工厂模式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("creatPerson")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    o.name = name;\n    o.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" o;\n}\n")])]),t("p",[s._v("缺点：对象无法识别，因为所有的实例都指向一个原型")]),t("ul",[t("li",[s._v("构造函数模式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Preson")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Preson("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(");\n")])]),t("p",[s._v("优点：实例可以识别为一个特定的类型")]),t("p",[s._v("缺点：每次创建实例时，每个方法都要被创建一次")]),t("p",[s._v("2.1 构造函数模式优化")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getName = getName;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("getName")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("优点：解决了每个方法都要被重新创建的问题")]),t("p",[s._v("缺点：没有封装")]),t("ul",[t("li",[s._v("原型模式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\nPerson.prototype.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(";\nPerson.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n};\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("优点：方法不会重新创建")]),t("p",[s._v("缺点：1. 所有的属性和方法都共享 2. 不能初始化参数")]),t("p",[s._v("3.1 原型模式优化")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{}\nPerson.prototype = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("getName")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("优点：封装性好了一点")]),t("p",[s._v("缺点：重写了原型，丢失了constructor属性")]),t("p",[s._v("3.2 原型模式优化")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{}\nPerson.prototype = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("constructor")]),s._v(" : Person,\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("getName")]),s._v(" : "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("优点：实例可以通过constructor属性找到所属构造函数")]),t("p",[s._v("缺点：原型模式该有的缺点还是有")]),t("ul",[t("li",[s._v("组合模式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n}\nPerson.prototype = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("constructor")]),s._v(" : Person,\n    getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(rthuis.name)\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("优点：该共享的共享，该私有的私有，使用最广泛的方式")]),t("p",[s._v("缺点：有的人就是希望全部都写在一起，即更好的封装性(就是不能完美啊)")]),t("p",[s._v("4.1 动态原型模式")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getName != "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v("){\n        Person.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n        }\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person();\n")])]),t("p",[s._v("使用动态原型模式时，不能用对象字面量重写原型,因为：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getName != "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v("){\n        Person.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n            "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n        }\n    }\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wyf'")]),s._v(");\nperson1.getName(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 报错，person1 没有这个方法")]),s._v("\nperson1.getName(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 注释掉上面的代码，可以正常执行")]),s._v("\n")])]),t("p",[s._v("当执行 var person1 = new Person('cxk');时 new 关键字会把 person1 对象的 __proto__ 属性指向构造函数 Person 的 prototype 属性, 执行函数的时候又用对象字面量的方式重写了 Person 构造函数的 prototype 属性, 而person1 对象的 __proto__ 属性任然指向原来的 prototype, 而原来的 prototype 上并没有 getName 方法, 所以报错。")]),t("p",[s._v("可以在用对象字面量的方式重写了 Person 构造函数的 prototype 属性后返回一个新实例解决这个问题：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getName != "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"function"')]),s._v(") {\n        Person.prototype = {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("constructor")]),s._v(": Person,\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("getName")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n                "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n            }\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Person(name);\n    }\n}\n")])]),t("ul",[t("li",[s._v("稳妥构造函数模式")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("person")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" o = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v("();\n    o.sayName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(name);\n    };\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" o;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = person("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(");\nperson1.sayName(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\nperson1.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"wyf"')]),s._v(";\nperson1.sayName(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(person1.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wyf")]),s._v("\n")])]),t("p",[s._v("所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。")]),t("p",[s._v("与寄生构造函数模式有两点不同：")]),t("ol",[t("li",[s._v("新创建的实例方法不引用 this")]),t("li",[s._v("不使用 new 操作符调用构造函数 稳妥对象最适合在一些安全的环境中。")])]),t("p",[s._v("稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。")]),t("h4",[s._v("继承的多种方式及优缺点")]),t("hr"),t("ol",[t("li",[s._v("原型链继承")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Parent")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(";\n}\nParent.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\nChild.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Parent();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child();\nchild.getName(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n")])]),t("p",[s._v("缺点：")]),t("ul",[t("li",[s._v("引用类型的属性会被所有实例共享：")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Parent")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".colors = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yellow'")]),s._v("];\n}\nParent.prototype.getColors = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".colors);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{}\nChild.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Parent();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child();\nchild1.getColors(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow']")]),s._v("\nchild1.colors.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v(");\nchild1.getColors(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow','blue']")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child();\nchild2.getColors(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow','blue']")]),s._v("\n")])]),t("ul",[t("li",[t("p",[s._v("在创建Child实例时不能像Parent传递参数")])]),t("li",[t("p",[s._v("借用构造函数")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Parent")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".colors = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yellow'")]),s._v("];\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    Parent.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", name)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(");\nchild1.colors.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".logh(child1.colors, child.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow','blue'] , cxk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wyf'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".logh(child2.colors, child.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//['red','yellow'] , wyf")]),s._v("\n")])]),t("p",[s._v("优点：")]),t("p",[s._v("1.避免了引用类型的属性被所有实例共享")]),t("p",[s._v("2.可以在 Child 中向 Parent 传参")]),t("p",[s._v("缺点：")]),t("p",[s._v("方法都在构造函数中定义，每次创建实例都会创建一遍方法。")]),t("ul",[t("li",[s._v("组合继承")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Parent")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".colors =  ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yellow'")]),s._v("];\n}\nParent.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(")")]),s._v("{\n    Parent.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", name);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".age = age;\n}\nChild.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Parent();\nChild.prototype.constructor = Child;\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(");\nchild1.colors.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child1.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child1.age); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 18")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child1.colors); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow','blue']")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child2 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'wyf'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'20'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child2.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// wyf")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child2.age); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child2.colors); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red','yellow']")]),s._v("\n")])]),t("p",[s._v("优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。")]),t("ul",[t("li",[s._v("原型式继承")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createObj")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("o")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{};\n    F.prototype = o;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" F();\n}\n")])]),t("p",[s._v("就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。")]),t("p",[s._v("缺点：")]),t("p",[s._v("包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("colors")]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yellow'")]),s._v("]\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person1 = createObj(person);\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" person2 = createObj(person);\n\nperson1.name = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'person1'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(person2.name); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// cxk")]),s._v("\n\nperson1.colors.push("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'blue'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(person2.colors); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ['red', 'yellow','blue']")]),s._v("\n")])]),t("ul",[t("li",[s._v("寄生式继承")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("createObj")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("o")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" clone = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".create(o);\n    clone.sayName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'hi'")]),s._v(");\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" clone;\n}\n")])]),t("p",[s._v("缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。")]),t("ol",[t("li",[s._v("寄生组合式继承")])]),t("p",[s._v("组合继承最大的缺点是会调用两次父构造函数。")]),t("p",[s._v("一次是设置子类型实例的原型的时候：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("Child.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Parent();\n")])]),t("p",[s._v("一次在创建子类型实例的时候：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{\n    Parent.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'18'")]),s._v(");\n")])]),t("p",[s._v("所以 Child.prototype 和 child1 都有一个属性为colors，属性值为 ['red','yellow']。")]),t("p",[s._v("间接的让 Child.prototype 访问到 Parent.prototype 可以避免这一次重复调用")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Parent")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name")]),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name = name;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".colors = ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'red'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'yellow'")]),s._v("];\n}\nParent.prototype.getName = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".name)\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Child")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name, age")]),s._v(") ")]),s._v("{\n    Parent.call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", name);\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".age = age;\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 关键的三步")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" F = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{};\nF.prototype = Parent.prototype;\nChild.prototype = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" F();\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" child1 = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Child("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'18'")]),s._v(");\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(child1);\n")])]),t("p",[s._v("封装一下:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("funtion createObj(o){\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("F")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(")")]),s._v("{};\n    F.prototype = o;\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" F();\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("prototype")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("child, parent")]),s._v(")")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" prototype = createObj(parent.prototype);\n    prototype.constructor = child;\n    child.prototype = prototype;\n}\nprototype(Child, Parent);\n")])]),t("blockquote",[t("p",[s._v("这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。 《JavaScript高级程序设计》")])]),t("hr"),t("p",[s._v("参考：")]),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/15"}},[s._v("JavaScript深入之创建对象的多种方式和优缺点")])]),t("li",[t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/16"}},[s._v("JavaScript深入之继承的多种方式和优缺点")])])]),t("p",[s._v("说明：本文全部参考"),t("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog"}},[s._v("冴羽大佬博客")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},e751:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("Promise 是异步编程的一种解决方案。")]),t("blockquote",[t("p",[s._v("所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。")])]),t("h4",[s._v("Promise 的特点")]),t("p",[s._v("Promise对象有以下两个特点：")]),t("ol",[t("li",[s._v("对象状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。")]),t("li",[s._v("状态只能改变一次。只有两种可能：从 pending变为 fulfilled 和从 pending 变为 rejected。")])]),t("h4",[s._v("Promise 的基本用法")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" promise = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("resolve, reject")]),s._v(")=>")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...一些代码（异步操作）")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 调用第一个参数（函数）Promise状态会成功（fulfilled），成功的结果就是传入的 value")]),s._v("\n    resolve(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 成功")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 或者失败（rejected）")]),s._v("\n    reject(reason) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 失败的原因是传入的 reason")]),s._v("\n})\n")])]),t("p",[s._v("Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们两个也是函数，由 JavaScript 引擎提供，不用自己部署。")]),t("p",[s._v("resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；")]),t("p",[s._v("resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),t("h5",[s._v("Promise.prototype.then()")]),t("p",[s._v("Promise 实例生成后可以用 then 方法分别指定 resolved 状态和 rejected 状态的回调函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("promise.then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise对象的状态变为resolved时调用, value 就是Promise 传出的值（reslove(value)）")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    },\n    reason => {"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Promise对象的状态变为rejected时调用, value 就是Promise 传出的值（reject(reason)）")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n)\n")])]),t("p",[s._v("then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。")]),t("p",[s._v("then 方法会返回一个 "),t("strong",[s._v("新")]),s._v(" 的 Promise 实例。因此可以采用链式写法")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(")=>")]),s._v("{\n    reslove(value)\n}).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    },\n    reason => {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    },\n    reason => {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n)\n")])]),t("p",[s._v("第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为resolved，就调用第一个回调函数，如果状态变为rejected，就调用第二个回调函数。")]),t("h5",[s._v("Promise.prototype.catch()")]),t("p",[s._v("catch方法 是then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reslove, reject")]),s._v(")=>")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n).then(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("value")]),s._v(" =>")]),s._v(" {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n).catch( "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 上面任何一个抛出的错误，都会被最后一个catch捕获。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("reason")]),s._v(" =>")]),s._v("{\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n)\n")])]),t("p",[s._v("如果 Promise 对象状态变为 resolved，则会调用 then 方法指定的回调函数；如果异步操作抛出错误，状态就会变为 rejected，就会调用 catch 方法指定的回调函数，处理这个错误。另外，then 方法指定的回调函数，如果运行中抛出错误，也会被 catch 方法捕获。")]),t("h5",[s._v("Promise.reslove(value)")]),t("p",[s._v("Promise.resolve方法的参数分成四种情况。")]),t("ol",[t("li",[s._v("如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。")]),t("li",[s._v("如果参数是 thenable对象(具有then方法的对象),方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。")]),t("li",[s._v("如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。")]),t("li",[s._v("Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reslove("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <resolved>: 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reslove() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <resolved>: undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reslove("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'失败了'")]),s._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <rejected>: '失败了'")]),s._v("\n")])]),t("h5",[s._v("Promise.reject(reason)")]),t("p",[s._v("返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// rejected>: 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// <rejected>: undefined")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".reject("),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".resolve("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// rejected>: 2")]),s._v("\n")])]),t("h5",[s._v("Promise.all()")]),t("p",[s._v("Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" pAll = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".all([p1, p2, p3, ...])\n")])]),t("p",[s._v("上面代码中，Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。")]),t("p",[s._v("pAll的状态由p1、p2、p3决定，分成两种情况。")]),t("p",[s._v("（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。")]),t("p",[s._v("（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。")]),t("h5",[s._v("Promise.race()")]),t("p",[s._v("Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" p = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Promise")]),s._v(".race([p1, p2, p3]);\n")])]),t("p",[s._v("上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。")]),t("hr"),t("p",[s._v("参考:")]),t("ul",[t("li",[t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise"}},[s._v("ECMAScript 6 入门")])])]),t("p",[s._v("说明：本文大量参考大佬"),t("a",{attrs:{href:"https://es6.ruanyifeng.com/"}},[s._v("阮一峰 ECMAScript 6 入门")]),s._v("，本人出于复习和总结知识点的目的加入些许个人理解，如有冒犯，敬请谅解。")])])}],!1,null,null,null);a.default=e.exports},fdaa:function(s,a,t){"use strict";t.r(a);var r=t("2877"),e=Object(r.a)({},(function(){this.$createElement;return this._self._c,this._m(0)}),[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-xhtml"}},[t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("id")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"app"')]),s._v(">")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("{{person.name}}"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("input")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("type")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"text"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("v-modle")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"person.hobby"')]),s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("div")]),s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("script")]),s._v(">")]),t("span",{pre:!0,attrs:{class:"javascript"}},[s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" vm = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" MyVue({\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("el")]),s._v(":"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"#app"')]),s._v(",\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("data")]),s._v(":{\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("person")]),s._v(":{\n                "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'cxk'")]),s._v(",\n                "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("hobby")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'basketball'")]),s._v("\n            }\n        }\n    })\n")]),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[s._v("</"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[s._v("script")]),s._v(">")]),s._v("\n")])]),t("p",[s._v("根据上面的 html 代码，我们从模板编译开始入手")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyVue")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(options) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 实例属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el = options.el;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data = options.data;\n\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译模板")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Compiler("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n        }\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Compiler")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(el, vm) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断 el 是否已经是一个元素节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".isElementNode(el) ? el : "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector(el);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm = vm;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把根节点元素转成文档碎片放到内存中编译以提升性能")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fragment = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".nodeFragment("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译文档碎片")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compile(fragment)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把编译好的文档碎片重新放回元素")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el.appendChild(fragment)\n    }\n    compile(fragment) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    }\n    nodeFragment(rootNode) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新建一个文碎片")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fragment = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createDocumentFragment();\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" firstChild;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (firstChild = rootNode.firstChild) {\n            fragment.appendChild(firstChild)\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fragment\n    }\n    isElementNode(el) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" el.nodeType === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n    }\n}\n")])]),t("p",[s._v("编译模板的整体思路大概就是这样，接下来重点是实现compile方法:")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Compiler")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n\n    compile(fragment) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取根元素节点的所有子元素节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" childNodes = fragment.childNodes;\n        [...childNodes].forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还是先判断是否是一个元素节点")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".isElementNode(node)) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是元素")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compileElement(node)\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还需要递归调用")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compile(node)\n            } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是文本")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compileText(node)\n            }\n        })\n    }\n    compileElement(node) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要判断元素节点是否有 v- 开头的属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" attributes = node.attributes; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取元素的所有属性")]),s._v("\n        [...attributes].forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("attr")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { name, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": expr } = attr\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (name.startsWith("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'v-'")]),s._v(")) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素有 v- 开头的属性，取出 v- 后面的指令")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [, directive] = name.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'-'")]),s._v(")\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据指令调用不同的方法")]),s._v("\n                CompilUtil[directive](node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, expr)\n            }\n        })\n    }\n    compileText(node) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要判断文本内容是否有 {{}}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" content = node.textContent\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/")]),s._v(".test(content)) {\n            CompilUtil["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'text'")]),s._v("](node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, content)\n        }\n    }\n\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])]),t("p",[s._v("最后都是通过 CompilUtil 的方法来处理的，所以：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("CompilUtil = {\n    getValue(vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" expr.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.'")]),s._v(").reduce("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, current")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data[current]\n        }, vm.$data) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从 vm 的 $data 上取对应表达式的值")]),s._v("\n    },\n    modle(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:元素节点 (input)\n            vm: MyVue 实例\n            expr 表达式 (person.hobby)\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 首先要通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, expr);\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换 input 元素的 value 属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'modeUpdate'")]),s._v("]\n        fn(node, value)\n    },\n    text(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:文本节点\n            vm: MyVue 实例\n            expr 表达式 {{person.name}}\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" reg = "),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/g")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配 {{}}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = expr.replace(reg, (...arg) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]);\n        })\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换文本节点的 textContent 属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'textUpdate'")]),s._v("]\n        fn(node, value)\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("update")]),s._v(": {\n        modeUpdate(node, value) {\n            node.value = value\n        },\n        textUpdate(node, value) {\n            node.textContent = value\n        }\n    }\n}\n")])]),t("p",[s._v("此时模板就能正确的显示我们想要的效果了，不过要想实现响应式，还远远不够。开头就引用了 Vue 官方文档的描述 Vue 实例会遍历 data 对象，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。因此我们需要一个 监听者 Observer")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyVue")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(options) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 实例属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el = options.el;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data = options.data;\n\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听者 Observer")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Observer("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data)\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译模板")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Compiler("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n        }\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Observer")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(data)\n    }\n    observe(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" data === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历 data 对象，并使用 Object.defineProperty 把这些属性全部转为 getter / setter。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".defineReactive(data, key, data[key])\n            }\n        }\n    }\n    defineReactive(obj, key, value) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果值是对象，递归")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty(obj, key, {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value\n            },\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("set")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("newValue")]),s._v(") =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newValue !== value) {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新值是一个对象，为新对象也添加 getter, setter")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(newValue)\n                    value = newValue\n                }\n            }\n        })\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n")])]),t("p",[s._v("在 Observer 中我们用 Object.defineProperty 劫持 data 对象的属性,我们称 Observer 为 监听者。虽然 Vue 2.x 是基于数据劫持的双向绑定，但是依然离不开发布订阅的模式。所以我们要实现一个订阅发布中心，即消息管理员（Dep）,它负责储存订阅者和消息的分发,不管是订阅者还是发布者都需要依赖于它。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Dep")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 储存订阅者的数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs = [];\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 添加订阅者")]),s._v("\n    addSubs(watcher) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs.push(watcher)\n    }\n    notify() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通知所有的订阅者(Watcher)，触发订阅者的相应逻辑处理(更新操作)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("watcher")]),s._v(" =>")]),s._v(" {\n            watcher.update()\n        })\n    }\n}\n")])]),t("p",[s._v("我们还需要实现一个订阅者(Watcher)。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Watcher")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(vm, expr, cb) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm = vm; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 被订阅的数据一定来自于当前Vue实例")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cb = cb; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当数据更新时想要做的事情")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr = expr; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 被订阅的数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".val = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".get(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 维护更新之前的数据")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" val = CompilUtil.getValue(vm, expr)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" val;\n    }\n    update() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数据更新了，获取新的值并调用回调函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newValue = CompileUtil.getVal("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newValue !== "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cb(newValue)\n        }\n    }\n}\n")])]),t("p",[s._v("现在万事具备了，我们需要在指令中或需要编译的模板中安插订阅者(Watcher)")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("CompilUtil = {\n    getValue(vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" expr.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.'")]),s._v(").reduce("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, current")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data[current]\n        }, vm.$data) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从 vm 的 $data 上取对应表达式的值")]),s._v("\n    },\n    setValue(vm, expr, value){\n         expr.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.'")]),s._v(").reduce("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, current, index, arr")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v("(index === arr.length "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("-1")]),s._v("){\n                data[current] = value\n            }\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data[current]\n        }, vm.$data) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从 vm 的 $data 上取对应表达式的值")]),s._v("\n    },\n    modle(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:元素节点 (input)\n            vm: MyVue 实例\n            expr 表达式 (person.hobby)\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 首先要通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, expr);\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换 input 元素的 value 属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'modeUpdate'")]),s._v("]\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 安插订阅者，传入参数，当数据更新时 Dep 会通知它调用回调更新数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Watcher(vm, expr, (newValue)=>{\n            fn(node, newValue)\n        })\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为输入框添加 input 事件")]),s._v("\n        node.addEventListener("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'input'")]),s._v(",(e)=>{\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".setValue(vm, expr, e.target.value)\n        })\n        fn(node, value)\n    },\n    getAllExprValue(vm, expr){\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" expr.replace("),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/g")]),s._v(", (...arg) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("])\n        })\n    },\n    text(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:文本节点\n            vm: MyVue 实例\n            expr 表达式 {{person.name}}\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'textUpdate'")]),s._v("]\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" reg = "),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/g")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配 {{}}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = expr.replace(reg, (...arg) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// arg[1] 才是我们需要的表达式")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Watcher(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("], () => {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 表达式可能会有多个，当只更改一个的时候也需要重新获取所有的表示式对应的值进行整体的替换")]),s._v("\n                fn(node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getAllExprValue(vm, expr))\n            })\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]);\n        })\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换文本节点的 textContent 属性")]),s._v("\n        fn(node, value)\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("update")]),s._v(": {\n        modeUpdate(node, value) {\n            node.value = value\n        },\n        textUpdate(node, value) {\n            node.textContent = value\n        }\n    }\n}\n")])]),t("p",[s._v("只是安插订阅者(Watcher)还是不够，在数据更新时得有人通知它更新，所以当读取 Observer 监听的属性的时候，判断Dep类是否存在target属性，如果有就将对应的订阅者(Watcher)添加到 dep 实例的 subs 数组中，如果数据发生变化，dep 实例就会调用 notify 通知所有订阅者更新数据。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Watcher")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者")]),s._v("\n        Dep.target = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 关键一步")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" val = CompilUtil.getValue("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 置空，用于下一个Watcher使用")]),s._v("\n        Dep.target = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" val;\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Observer")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(data)\n    }\n    observe(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" data === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历 data 对象，并使用 Object.defineProperty 把这些属性全部转为 getter / setter。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".defineReactive(data, key, data[key])\n            }\n        }\n    }\n    defineReactive(obj, key, value) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果值是对象，递归")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" dep = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Dep()\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty(obj, key, {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n                    如果Dep类存在target属性，将其添加到dep实例的subs数组中\n                    target指向一个Watcher实例，每个Watcher都是一个订阅者\n                    Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法\n                */")]),s._v("\n                Dep.target && dep.addSubs(Dep.target)\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value\n            },\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("set")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("newValue")]),s._v(") =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newValue !== value) {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新值是一个对象，为新对象也添加 getter, setter")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(newValue)\n                    value = newValue\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数值被改变了,通知所有订阅者")]),s._v("\n                    dep.notify();\n                }\n            }\n        })\n    }\n}\n")])]),t("p",[s._v("至此,一个简单的双向绑定算是被我们实现了。")]),t("p",[s._v("我们还可以试着简单的实现一下 computed 和 methods")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyVue")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(options) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 实例属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el = options.el;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data = options.data;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将所有data最外层属性代理到Vue实例上")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data).forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("key")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._proxy(key));\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" computed = options.computed;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" methods = options.methods;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听者 Observer")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Observer("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data)\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" computed) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过 this.key 获取 computed 属性是，实际上是调用了 computed[key]")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data, key, {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" computed[key].call("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n                    }\n                })\n            }\n\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" methods) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过 this.key 获取 methods 属性是，实际上是调用了 methods[key]")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", key, {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" methods[key]\n                    }\n                })\n            }\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译模板")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Compiler("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n        }\n    }\n    _proxy(key) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", key, {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data[key],\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("set")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("val")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data[key] = val;\n            }\n        })\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Compiler")]),s._v(" ")]),s._v("{\n   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    compileElement(node) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要判断元素节点是否有 v- 开头的属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" attributes = node.attributes; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取元素的所有属性")]),s._v("\n        [...attributes].forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("attr")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { name, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": expr } = attr\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (name.startsWith("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'v-'")]),s._v(")) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素有 v- 开头的属性，取出 v- 后面的指令")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [, directive] = name.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'-'")]),s._v(")\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [directiveName, enentName] = directive.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':'")]),s._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是事件(v-on:click)用 : 分割")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据指令调用不同的方法")]),s._v("\n                CompilUtil[directiveName](node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, expr, enentName)\n            }\n        })\n    }\n   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\nCompilUtil = {\n   "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n    on(node, vm, expr, enentName){\n         "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:元素节点\n            vm: MyVue 实例\n            expr: 表达式 事件函数名\n            enentName: 事件名\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 给元素节点添加事件")]),s._v("\n        node.addEventListener(enentName, (e)=>{\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据表达式调用对应函数，并传入事件对象")]),s._v("\n            vm[expr].call(vm, e)\n        })\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// ...")]),s._v("\n}\n")])]),t("p",[s._v("最终代码：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyVue")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(options) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 实例属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el = options.el;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data = options.data;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" computed = options.computed;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" methods = options.methods;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 将所有data最外层属性代理到Vue实例上")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".keys("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data).forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("key")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("._proxy(key));\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 监听者 Observer")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Observer("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data)\n\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" computed) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过 this.key 获取 computed 属性是，实际上是调用了 computed[key]")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", key, {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" computed[key].call()\n                    }\n                })\n            }\n\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" methods) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过 this.key 获取 methods 属性是，实际上是调用了 methods[key]")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", key, {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" methods[key]\n                    }\n                })\n            }\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译模板")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Compiler("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$el, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(")\n        }\n    }\n    _proxy(key) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(", key, {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data[key],\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("set")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("val")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".$data[key] = val;\n            }\n        })\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Compiler")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(el, vm) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 判断 el 是否已经是一个元素节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".isElementNode(el) ? el : "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".querySelector(el);\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm = vm;\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把根节点元素转成文档碎片放到内存中编译提升性能")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fragment = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".nodeFragment("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 编译文档碎片")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compile(fragment)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 把编译好的文档碎片重新放回元素")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".el.appendChild(fragment)\n    }\n    compile(fragment) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取根元素节点的所有子元素节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" childNodes = fragment.childNodes;\n        [...childNodes].forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("node")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还是先判断是否是一个元素节点")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".isElementNode(node)) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是元素")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compileElement(node)\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 还需要递归调用")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compile(node)\n            } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果是文本")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".compileText(node)\n            }\n        })\n    }\n    compileElement(node) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要判断元素节点是否有 v- 开头的属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" attributes = node.attributes; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 获取元素的所有属性")]),s._v("\n        [...attributes].forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("attr")]),s._v(" =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" { name, "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("value")]),s._v(": expr } = attr\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (name.startsWith("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'v-'")]),s._v(")) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素有 v- 开头的属性，取出 v- 后面的指令")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [, directive] = name.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'-'")]),s._v(")\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" [directiveName, enentName] = directive.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':'")]),s._v(")\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据指令调用不同的方法")]),s._v("\n                CompilUtil[directiveName](node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, expr, enentName)\n            }\n        })\n    }\n    compileText(node) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 需要判断文本内容是否有 {{}}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" content = node.textContent\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/")]),s._v(".test(content)) {\n            CompilUtil["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'text'")]),s._v("](node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, content)\n        }\n    }\n    nodeFragment(rootNode) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 新建一个文碎片")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fragment = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("document")]),s._v(".createDocumentFragment();\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" firstChild;\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" (firstChild = rootNode.firstChild) {\n            fragment.appendChild(firstChild)\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" fragment\n    }\n    isElementNode(el) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" el.nodeType === "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Observer")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(data)\n    }\n    observe(data) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" data === "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(") {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 遍历 data 对象，并使用 Object.defineProperty 把这些属性全部转为 getter / setter。")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" data) {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".defineReactive(data, key, data[key])\n            }\n        }\n    }\n    defineReactive(obj, key, value) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(value) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果值是对象，递归")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" dep = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Dep()\n        "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Object")]),s._v(".defineProperty(obj, key, {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("enumerable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("configurable")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("get")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n                    如果Dep类存在target属性，将其添加到dep实例的subs数组中\n                    target指向一个Watcher实例，每个Watcher都是一个订阅者\n                    Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法\n                */")]),s._v("\n                Dep.target && dep.addSubs(Dep.target)\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" value\n            },\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("set")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("newValue")]),s._v(") =>")]),s._v(" {\n                "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newValue !== value) {\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如果新值是一个对象，为新对象也添加 getter, setter")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".observe(newValue)\n                    value = newValue\n                    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数值被改变了,通知所有订阅者")]),s._v("\n                    dep.notify();\n                }\n            }\n        })\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Dep")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 储存订阅者的数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs = [];\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 添加订阅者")]),s._v("\n    addSubs(watcher) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs.push(watcher)\n    }\n    notify() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通知所有的订阅者(Watcher)，触发订阅者的相应逻辑处理(更新操作)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".subs.forEach("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("watcher")]),s._v(" =>")]),s._v(" {\n            watcher.update()\n        })\n    }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-class"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Watcher")]),s._v(" ")]),s._v("{\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("constructor")]),s._v("(vm, expr, cb) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm = vm; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 被订阅的数据一定来自于当前Vue实例")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cb = cb; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当数据更新时想要做的事情")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr = expr; "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 被订阅的数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".val = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".get(); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 维护更新之前的数据")]),s._v("\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("get")]),s._v("() {\n\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者")]),s._v("\n        Dep.target = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" val = CompilUtil.getValue("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr)\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 置空，用于下一个Watcher使用")]),s._v("\n        Dep.target = "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" val;\n    }\n    update() {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 数据更新了，获取新的值并调用回调函数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" newValue = CompilUtil.getValue("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".vm, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".expr)\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (newValue !== "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".value) {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".cb(newValue)\n        }\n    }\n}\n\nCompilUtil = {\n    getValue(vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" expr.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.'")]),s._v(").reduce("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, current")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data[current]\n        }, vm.$data) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从 vm 的 $data 上取对应表达式的值")]),s._v("\n    },\n    setValue(vm, expr, value) {\n        expr.split("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.'")]),s._v(").reduce("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("data, current, index, arr")]),s._v(") =>")]),s._v(" {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (index === arr.length - "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") {\n                data[current] = value\n            }\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" data[current]\n        }, vm.$data) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 从 vm 的 $data 上取对应表达式的值")]),s._v("\n    },\n    modle(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:元素节点 (input)\n            vm: MyVue 实例\n            expr 表达式 (person.hobby)\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 首先要通过表达式获取 vm 上对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, expr);\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换 input 元素的 value 属性")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'modeUpdate'")]),s._v("]\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 安插订阅者，传入参数，当数据更新时 Dep 会通知它调用回调更新数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Watcher(vm, expr, (newValue) => {\n            fn(node, newValue)\n        })\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 为输入框添加 input 事件")]),s._v("\n        node.addEventListener("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'input'")]),s._v(", (e) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".setValue(vm, expr, e.target.value)\n        })\n        fn(node, value)\n    },\n    on(node, vm, expr, enentName) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:元素节点 \n            vm: MyVue 实例\n            expr 表达式 事件函数名\n            enentName： 事件名\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 给元素节点添加事件")]),s._v("\n        node.addEventListener(enentName, (e) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 根据表达式调用对应函数，并传入事件对象")]),s._v("\n            vm[expr].call(vm, e)\n        })\n    },\n    text(node, vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/*\n            node:文本节点\n            vm: MyVue 实例\n            expr 表达式 {{person.name}}\n        */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" fn = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".update["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'textUpdate'")]),s._v("]\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" reg = "),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/g")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 匹配 {{}}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" value = expr.replace(reg, (...arg) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// arg[1] 才是我们需要的表达式")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Watcher(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("], () => {\n                "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 表达式可能会有多个，当只更改一个的时候也需要重新获取所有的表示式对应的值进行整体的替换")]),s._v("\n                fn(node, "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getAllExprValue(vm, expr))\n            })\n            "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 通过表达式获取 vm 上对应的值")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("]);\n        })\n        "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 然后用获取到的值替换文本节点的 textContent 属性")]),s._v("\n        fn(node, value)\n    },\n    getAllExprValue(vm, expr) {\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" expr.replace("),t("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/\\{\\{(.+?)\\}\\}/g")]),s._v(", (...arg) => {\n            "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("this")]),s._v(".getValue(vm, arg["),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v("])\n        })\n    },\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("update")]),s._v(": {\n        modeUpdate(node, value) {\n            node.value = value\n        },\n        textUpdate(node, value) {\n            node.textContent = value\n        }\n    }\n}\n")])]),t("hr"),t("p",[s._v("说明：本文是本人对 Promise 的一些简单的理解，如有错误还望指出。")])])}],!1,null,null,null);a.default=e.exports}}]);